<?php
/**
 * Submission
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocSpring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocSpring\Model;

use \ArrayAccess;
use \DocSpring\ObjectSerializer;

/**
 * Submission Class Doc Comment
 *
 * @category Class
 * @package  DocSpring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Submission implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'submission';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'batch_id' => 'string',
        'data_requests' => '\DocSpring\Model\SubmissionDataRequest[]',
        'editable' => 'bool',
        'expired' => 'bool',
        'expires_at' => 'string',
        'id' => 'string',
        'json_schema_errors' => 'string[]',
        'metadata' => 'object',
        'password' => 'string',
        'processed_at' => 'string',
        'state' => 'string',
        'template_id' => 'string',
        'test' => 'bool',
        'truncated_text' => 'object',
        'pdf_hash' => 'string',
        'download_url' => 'string',
        'permanent_download_url' => 'string',
        'preview_download_url' => 'string',
        'preview_generated_at' => 'string',
        'audit_trail_download_url' => 'string',
        'actions' => '\DocSpring\Model\SubmissionAction[]',
        'source' => 'string',
        'referrer' => 'string',
        'data' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'batch_id' => null,
        'data_requests' => null,
        'editable' => null,
        'expired' => null,
        'expires_at' => null,
        'id' => null,
        'json_schema_errors' => null,
        'metadata' => null,
        'password' => null,
        'processed_at' => null,
        'state' => null,
        'template_id' => null,
        'test' => null,
        'truncated_text' => null,
        'pdf_hash' => null,
        'download_url' => null,
        'permanent_download_url' => null,
        'preview_download_url' => null,
        'preview_generated_at' => null,
        'audit_trail_download_url' => null,
        'actions' => null,
        'source' => null,
        'referrer' => null,
        'data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'batch_id' => true,
        'data_requests' => false,
        'editable' => true,
        'expired' => false,
        'expires_at' => true,
        'id' => true,
        'json_schema_errors' => true,
        'metadata' => false,
        'password' => true,
        'processed_at' => true,
        'state' => false,
        'template_id' => true,
        'test' => false,
        'truncated_text' => true,
        'pdf_hash' => true,
        'download_url' => true,
        'permanent_download_url' => true,
        'preview_download_url' => true,
        'preview_generated_at' => true,
        'audit_trail_download_url' => true,
        'actions' => false,
        'source' => false,
        'referrer' => true,
        'data' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_id' => 'batch_id',
        'data_requests' => 'data_requests',
        'editable' => 'editable',
        'expired' => 'expired',
        'expires_at' => 'expires_at',
        'id' => 'id',
        'json_schema_errors' => 'json_schema_errors',
        'metadata' => 'metadata',
        'password' => 'password',
        'processed_at' => 'processed_at',
        'state' => 'state',
        'template_id' => 'template_id',
        'test' => 'test',
        'truncated_text' => 'truncated_text',
        'pdf_hash' => 'pdf_hash',
        'download_url' => 'download_url',
        'permanent_download_url' => 'permanent_download_url',
        'preview_download_url' => 'preview_download_url',
        'preview_generated_at' => 'preview_generated_at',
        'audit_trail_download_url' => 'audit_trail_download_url',
        'actions' => 'actions',
        'source' => 'source',
        'referrer' => 'referrer',
        'data' => 'data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batch_id' => 'setBatchId',
        'data_requests' => 'setDataRequests',
        'editable' => 'setEditable',
        'expired' => 'setExpired',
        'expires_at' => 'setExpiresAt',
        'id' => 'setId',
        'json_schema_errors' => 'setJsonSchemaErrors',
        'metadata' => 'setMetadata',
        'password' => 'setPassword',
        'processed_at' => 'setProcessedAt',
        'state' => 'setState',
        'template_id' => 'setTemplateId',
        'test' => 'setTest',
        'truncated_text' => 'setTruncatedText',
        'pdf_hash' => 'setPdfHash',
        'download_url' => 'setDownloadUrl',
        'permanent_download_url' => 'setPermanentDownloadUrl',
        'preview_download_url' => 'setPreviewDownloadUrl',
        'preview_generated_at' => 'setPreviewGeneratedAt',
        'audit_trail_download_url' => 'setAuditTrailDownloadUrl',
        'actions' => 'setActions',
        'source' => 'setSource',
        'referrer' => 'setReferrer',
        'data' => 'setData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batch_id' => 'getBatchId',
        'data_requests' => 'getDataRequests',
        'editable' => 'getEditable',
        'expired' => 'getExpired',
        'expires_at' => 'getExpiresAt',
        'id' => 'getId',
        'json_schema_errors' => 'getJsonSchemaErrors',
        'metadata' => 'getMetadata',
        'password' => 'getPassword',
        'processed_at' => 'getProcessedAt',
        'state' => 'getState',
        'template_id' => 'getTemplateId',
        'test' => 'getTest',
        'truncated_text' => 'getTruncatedText',
        'pdf_hash' => 'getPdfHash',
        'download_url' => 'getDownloadUrl',
        'permanent_download_url' => 'getPermanentDownloadUrl',
        'preview_download_url' => 'getPreviewDownloadUrl',
        'preview_generated_at' => 'getPreviewGeneratedAt',
        'audit_trail_download_url' => 'getAuditTrailDownloadUrl',
        'actions' => 'getActions',
        'source' => 'getSource',
        'referrer' => 'getReferrer',
        'data' => 'getData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_PENDING = 'pending';
    public const STATE_PROCESSED = 'processed';
    public const STATE_INVALID_DATA = 'invalid_data';
    public const STATE_ERROR = 'error';
    public const STATE_IMAGE_DOWNLOAD_FAILED = 'image_download_failed';
    public const STATE_IMAGE_PROCESSING_FAILED = 'image_processing_failed';
    public const STATE_WAITING_FOR_DATA_REQUESTS = 'waiting_for_data_requests';
    public const STATE_SYNTAX_ERROR = 'syntax_error';
    public const STATE_ACCOUNT_SUSPENDED = 'account_suspended';
    public const STATE_LICENSE_REVOKED = 'license_revoked';
    public const STATE_ACCIDENTAL = 'accidental';
    public const SOURCE_API = 'api';
    public const SOURCE_WEB = 'web';
    public const SOURCE_REPROCESS = 'reprocess';
    public const SOURCE_WEBHOOK = 'webhook';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_PROCESSED,
            self::STATE_INVALID_DATA,
            self::STATE_ERROR,
            self::STATE_IMAGE_DOWNLOAD_FAILED,
            self::STATE_IMAGE_PROCESSING_FAILED,
            self::STATE_WAITING_FOR_DATA_REQUESTS,
            self::STATE_SYNTAX_ERROR,
            self::STATE_ACCOUNT_SUSPENDED,
            self::STATE_LICENSE_REVOKED,
            self::STATE_ACCIDENTAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_API,
            self::SOURCE_WEB,
            self::SOURCE_REPROCESS,
            self::SOURCE_WEBHOOK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('batch_id', $data ?? [], null);
        $this->setIfExists('data_requests', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
        $this->setIfExists('expired', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('json_schema_errors', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('processed_at', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('test', $data ?? [], null);
        $this->setIfExists('truncated_text', $data ?? [], null);
        $this->setIfExists('pdf_hash', $data ?? [], null);
        $this->setIfExists('download_url', $data ?? [], null);
        $this->setIfExists('permanent_download_url', $data ?? [], null);
        $this->setIfExists('preview_download_url', $data ?? [], null);
        $this->setIfExists('preview_generated_at', $data ?? [], null);
        $this->setIfExists('audit_trail_download_url', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('referrer', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['batch_id'] === null) {
            $invalidProperties[] = "'batch_id' can't be null";
        }
        if ($this->container['data_requests'] === null) {
            $invalidProperties[] = "'data_requests' can't be null";
        }
        if ($this->container['editable'] === null) {
            $invalidProperties[] = "'editable' can't be null";
        }
        if ($this->container['expired'] === null) {
            $invalidProperties[] = "'expired' can't be null";
        }
        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['json_schema_errors'] === null) {
            $invalidProperties[] = "'json_schema_errors' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ($this->container['processed_at'] === null) {
            $invalidProperties[] = "'processed_at' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['template_id'] === null) {
            $invalidProperties[] = "'template_id' can't be null";
        }
        if ($this->container['test'] === null) {
            $invalidProperties[] = "'test' can't be null";
        }
        if ($this->container['truncated_text'] === null) {
            $invalidProperties[] = "'truncated_text' can't be null";
        }
        if ($this->container['pdf_hash'] === null) {
            $invalidProperties[] = "'pdf_hash' can't be null";
        }
        if ($this->container['download_url'] === null) {
            $invalidProperties[] = "'download_url' can't be null";
        }
        if ($this->container['permanent_download_url'] === null) {
            $invalidProperties[] = "'permanent_download_url' can't be null";
        }
        if ($this->container['preview_download_url'] === null) {
            $invalidProperties[] = "'preview_download_url' can't be null";
        }
        if ($this->container['preview_generated_at'] === null) {
            $invalidProperties[] = "'preview_generated_at' can't be null";
        }
        if ($this->container['audit_trail_download_url'] === null) {
            $invalidProperties[] = "'audit_trail_download_url' can't be null";
        }
        if ($this->container['actions'] === null) {
            $invalidProperties[] = "'actions' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['referrer'] === null) {
            $invalidProperties[] = "'referrer' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batch_id
     *
     * @return string
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param string $batch_id batch_id
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        if (is_null($batch_id)) {
            array_push($this->openAPINullablesSetToNull, 'batch_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets data_requests
     *
     * @return \DocSpring\Model\SubmissionDataRequest[]
     */
    public function getDataRequests()
    {
        return $this->container['data_requests'];
    }

    /**
     * Sets data_requests
     *
     * @param \DocSpring\Model\SubmissionDataRequest[] $data_requests data_requests
     *
     * @return self
     */
    public function setDataRequests($data_requests)
    {
        if (is_null($data_requests)) {
            throw new \InvalidArgumentException('non-nullable data_requests cannot be null');
        }
        $this->container['data_requests'] = $data_requests;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool $editable editable
     *
     * @return self
     */
    public function setEditable($editable)
    {
        if (is_null($editable)) {
            array_push($this->openAPINullablesSetToNull, 'editable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('editable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool $expired expired
     *
     * @return self
     */
    public function setExpired($expired)
    {
        if (is_null($expired)) {
            throw new \InvalidArgumentException('non-nullable expired cannot be null');
        }
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string $expires_at expires_at
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets json_schema_errors
     *
     * @return string[]
     */
    public function getJsonSchemaErrors()
    {
        return $this->container['json_schema_errors'];
    }

    /**
     * Sets json_schema_errors
     *
     * @param string[] $json_schema_errors json_schema_errors
     *
     * @return self
     */
    public function setJsonSchemaErrors($json_schema_errors)
    {
        if (is_null($json_schema_errors)) {
            array_push($this->openAPINullablesSetToNull, 'json_schema_errors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('json_schema_errors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['json_schema_errors'] = $json_schema_errors;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            array_push($this->openAPINullablesSetToNull, 'password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets processed_at
     *
     * @return string
     */
    public function getProcessedAt()
    {
        return $this->container['processed_at'];
    }

    /**
     * Sets processed_at
     *
     * @param string $processed_at processed_at
     *
     * @return self
     */
    public function setProcessedAt($processed_at)
    {
        if (is_null($processed_at)) {
            array_push($this->openAPINullablesSetToNull, 'processed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('processed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['processed_at'] = $processed_at;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string $template_id template_id
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            array_push($this->openAPINullablesSetToNull, 'template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test test
     *
     * @return self
     */
    public function setTest($test)
    {
        if (is_null($test)) {
            throw new \InvalidArgumentException('non-nullable test cannot be null');
        }
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets truncated_text
     *
     * @return object
     */
    public function getTruncatedText()
    {
        return $this->container['truncated_text'];
    }

    /**
     * Sets truncated_text
     *
     * @param object $truncated_text truncated_text
     *
     * @return self
     */
    public function setTruncatedText($truncated_text)
    {
        if (is_null($truncated_text)) {
            array_push($this->openAPINullablesSetToNull, 'truncated_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('truncated_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['truncated_text'] = $truncated_text;

        return $this;
    }

    /**
     * Gets pdf_hash
     *
     * @return string
     */
    public function getPdfHash()
    {
        return $this->container['pdf_hash'];
    }

    /**
     * Sets pdf_hash
     *
     * @param string $pdf_hash pdf_hash
     *
     * @return self
     */
    public function setPdfHash($pdf_hash)
    {
        if (is_null($pdf_hash)) {
            array_push($this->openAPINullablesSetToNull, 'pdf_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pdf_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pdf_hash'] = $pdf_hash;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url download_url
     *
     * @return self
     */
    public function setDownloadUrl($download_url)
    {
        if (is_null($download_url)) {
            array_push($this->openAPINullablesSetToNull, 'download_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets permanent_download_url
     *
     * @return string
     */
    public function getPermanentDownloadUrl()
    {
        return $this->container['permanent_download_url'];
    }

    /**
     * Sets permanent_download_url
     *
     * @param string $permanent_download_url permanent_download_url
     *
     * @return self
     */
    public function setPermanentDownloadUrl($permanent_download_url)
    {
        if (is_null($permanent_download_url)) {
            array_push($this->openAPINullablesSetToNull, 'permanent_download_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permanent_download_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permanent_download_url'] = $permanent_download_url;

        return $this;
    }

    /**
     * Gets preview_download_url
     *
     * @return string
     */
    public function getPreviewDownloadUrl()
    {
        return $this->container['preview_download_url'];
    }

    /**
     * Sets preview_download_url
     *
     * @param string $preview_download_url preview_download_url
     *
     * @return self
     */
    public function setPreviewDownloadUrl($preview_download_url)
    {
        if (is_null($preview_download_url)) {
            array_push($this->openAPINullablesSetToNull, 'preview_download_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preview_download_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preview_download_url'] = $preview_download_url;

        return $this;
    }

    /**
     * Gets preview_generated_at
     *
     * @return string
     */
    public function getPreviewGeneratedAt()
    {
        return $this->container['preview_generated_at'];
    }

    /**
     * Sets preview_generated_at
     *
     * @param string $preview_generated_at preview_generated_at
     *
     * @return self
     */
    public function setPreviewGeneratedAt($preview_generated_at)
    {
        if (is_null($preview_generated_at)) {
            array_push($this->openAPINullablesSetToNull, 'preview_generated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preview_generated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preview_generated_at'] = $preview_generated_at;

        return $this;
    }

    /**
     * Gets audit_trail_download_url
     *
     * @return string
     */
    public function getAuditTrailDownloadUrl()
    {
        return $this->container['audit_trail_download_url'];
    }

    /**
     * Sets audit_trail_download_url
     *
     * @param string $audit_trail_download_url audit_trail_download_url
     *
     * @return self
     */
    public function setAuditTrailDownloadUrl($audit_trail_download_url)
    {
        if (is_null($audit_trail_download_url)) {
            array_push($this->openAPINullablesSetToNull, 'audit_trail_download_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audit_trail_download_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['audit_trail_download_url'] = $audit_trail_download_url;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \DocSpring\Model\SubmissionAction[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \DocSpring\Model\SubmissionAction[] $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return string
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param string $referrer referrer
     *
     * @return self
     */
    public function setReferrer($referrer)
    {
        if (is_null($referrer)) {
            array_push($this->openAPINullablesSetToNull, 'referrer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referrer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets data
     *
     * @return object
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param object $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


