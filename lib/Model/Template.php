<?php
/**
 * Template
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocSpring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocSpring\Model;

use \ArrayAccess;
use \DocSpring\ObjectSerializer;

/**
 * Template Class Doc Comment
 *
 * @category Class
 * @package  DocSpring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Template implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'template';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'add_data_request_submission_id_footers' => 'bool',
        'allow_additional_properties' => 'bool',
        'description' => 'string',
        'document_filename' => 'string',
        'document_md5' => 'string',
        'document_parse_error' => 'bool',
        'document_processed' => 'bool',
        'document_state' => 'string',
        'document_url' => 'string',
        'editable_submissions' => 'bool',
        'embed_domains' => 'string',
        'encrypt_pdfs_password' => 'string',
        'encrypt_pdfs' => 'bool',
        'expiration_interval' => 'string',
        'expire_after' => 'int',
        'expire_submissions' => 'bool',
        'external_predefined_fields_template_id' => 'string',
        'external_predefined_fields_template_name' => 'string',
        'first_template' => 'bool',
        'id' => 'string',
        'locked' => 'bool',
        'merge_audit_trail_pdf' => 'bool',
        'name' => 'string',
        'page_count' => 'int',
        'page_dimensions' => 'float[][]',
        'parent_folder_id' => 'string',
        'path' => 'string',
        'permanent_document_url' => 'string',
        'public_submissions' => 'bool',
        'public_web_form' => 'bool',
        'redirect_url' => 'string',
        'slack_webhook_url' => 'string',
        'template_type' => 'string',
        'updated_at' => 'string',
        'webhook_url' => 'string',
        'demo' => 'bool',
        'defaults' => 'object',
        'field_order' => 'float[][]',
        'fields' => 'object',
        'footer_html' => 'string',
        'header_html' => 'string',
        'html_engine_options' => 'object',
        'html' => 'string',
        'predefined_fields' => 'object[]',
        'scss' => 'string',
        'shared_field_data' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'add_data_request_submission_id_footers' => null,
        'allow_additional_properties' => null,
        'description' => null,
        'document_filename' => null,
        'document_md5' => null,
        'document_parse_error' => null,
        'document_processed' => null,
        'document_state' => null,
        'document_url' => null,
        'editable_submissions' => null,
        'embed_domains' => null,
        'encrypt_pdfs_password' => null,
        'encrypt_pdfs' => null,
        'expiration_interval' => null,
        'expire_after' => null,
        'expire_submissions' => null,
        'external_predefined_fields_template_id' => null,
        'external_predefined_fields_template_name' => null,
        'first_template' => null,
        'id' => null,
        'locked' => null,
        'merge_audit_trail_pdf' => null,
        'name' => null,
        'page_count' => null,
        'page_dimensions' => null,
        'parent_folder_id' => null,
        'path' => null,
        'permanent_document_url' => null,
        'public_submissions' => null,
        'public_web_form' => null,
        'redirect_url' => null,
        'slack_webhook_url' => null,
        'template_type' => null,
        'updated_at' => null,
        'webhook_url' => null,
        'demo' => null,
        'defaults' => null,
        'field_order' => null,
        'fields' => null,
        'footer_html' => null,
        'header_html' => null,
        'html_engine_options' => null,
        'html' => null,
        'predefined_fields' => null,
        'scss' => null,
        'shared_field_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'add_data_request_submission_id_footers' => false,
        'allow_additional_properties' => false,
        'description' => true,
        'document_filename' => true,
        'document_md5' => true,
        'document_parse_error' => false,
        'document_processed' => false,
        'document_state' => false,
        'document_url' => true,
        'editable_submissions' => false,
        'embed_domains' => true,
        'encrypt_pdfs_password' => true,
        'encrypt_pdfs' => false,
        'expiration_interval' => false,
        'expire_after' => false,
        'expire_submissions' => false,
        'external_predefined_fields_template_id' => true,
        'external_predefined_fields_template_name' => true,
        'first_template' => false,
        'id' => true,
        'locked' => false,
        'merge_audit_trail_pdf' => false,
        'name' => true,
        'page_count' => false,
        'page_dimensions' => true,
        'parent_folder_id' => true,
        'path' => true,
        'permanent_document_url' => true,
        'public_submissions' => false,
        'public_web_form' => false,
        'redirect_url' => true,
        'slack_webhook_url' => true,
        'template_type' => false,
        'updated_at' => true,
        'webhook_url' => true,
        'demo' => false,
        'defaults' => false,
        'field_order' => false,
        'fields' => false,
        'footer_html' => true,
        'header_html' => true,
        'html_engine_options' => false,
        'html' => true,
        'predefined_fields' => false,
        'scss' => true,
        'shared_field_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_data_request_submission_id_footers' => 'add_data_request_submission_id_footers',
        'allow_additional_properties' => 'allow_additional_properties',
        'description' => 'description',
        'document_filename' => 'document_filename',
        'document_md5' => 'document_md5',
        'document_parse_error' => 'document_parse_error',
        'document_processed' => 'document_processed',
        'document_state' => 'document_state',
        'document_url' => 'document_url',
        'editable_submissions' => 'editable_submissions',
        'embed_domains' => 'embed_domains',
        'encrypt_pdfs_password' => 'encrypt_pdfs_password',
        'encrypt_pdfs' => 'encrypt_pdfs',
        'expiration_interval' => 'expiration_interval',
        'expire_after' => 'expire_after',
        'expire_submissions' => 'expire_submissions',
        'external_predefined_fields_template_id' => 'external_predefined_fields_template_id',
        'external_predefined_fields_template_name' => 'external_predefined_fields_template_name',
        'first_template' => 'first_template',
        'id' => 'id',
        'locked' => 'locked',
        'merge_audit_trail_pdf' => 'merge_audit_trail_pdf',
        'name' => 'name',
        'page_count' => 'page_count',
        'page_dimensions' => 'page_dimensions',
        'parent_folder_id' => 'parent_folder_id',
        'path' => 'path',
        'permanent_document_url' => 'permanent_document_url',
        'public_submissions' => 'public_submissions',
        'public_web_form' => 'public_web_form',
        'redirect_url' => 'redirect_url',
        'slack_webhook_url' => 'slack_webhook_url',
        'template_type' => 'template_type',
        'updated_at' => 'updated_at',
        'webhook_url' => 'webhook_url',
        'demo' => 'demo',
        'defaults' => 'defaults',
        'field_order' => 'field_order',
        'fields' => 'fields',
        'footer_html' => 'footer_html',
        'header_html' => 'header_html',
        'html_engine_options' => 'html_engine_options',
        'html' => 'html',
        'predefined_fields' => 'predefined_fields',
        'scss' => 'scss',
        'shared_field_data' => 'shared_field_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_data_request_submission_id_footers' => 'setAddDataRequestSubmissionIdFooters',
        'allow_additional_properties' => 'setAllowAdditionalProperties',
        'description' => 'setDescription',
        'document_filename' => 'setDocumentFilename',
        'document_md5' => 'setDocumentMd5',
        'document_parse_error' => 'setDocumentParseError',
        'document_processed' => 'setDocumentProcessed',
        'document_state' => 'setDocumentState',
        'document_url' => 'setDocumentUrl',
        'editable_submissions' => 'setEditableSubmissions',
        'embed_domains' => 'setEmbedDomains',
        'encrypt_pdfs_password' => 'setEncryptPdfsPassword',
        'encrypt_pdfs' => 'setEncryptPdfs',
        'expiration_interval' => 'setExpirationInterval',
        'expire_after' => 'setExpireAfter',
        'expire_submissions' => 'setExpireSubmissions',
        'external_predefined_fields_template_id' => 'setExternalPredefinedFieldsTemplateId',
        'external_predefined_fields_template_name' => 'setExternalPredefinedFieldsTemplateName',
        'first_template' => 'setFirstTemplate',
        'id' => 'setId',
        'locked' => 'setLocked',
        'merge_audit_trail_pdf' => 'setMergeAuditTrailPdf',
        'name' => 'setName',
        'page_count' => 'setPageCount',
        'page_dimensions' => 'setPageDimensions',
        'parent_folder_id' => 'setParentFolderId',
        'path' => 'setPath',
        'permanent_document_url' => 'setPermanentDocumentUrl',
        'public_submissions' => 'setPublicSubmissions',
        'public_web_form' => 'setPublicWebForm',
        'redirect_url' => 'setRedirectUrl',
        'slack_webhook_url' => 'setSlackWebhookUrl',
        'template_type' => 'setTemplateType',
        'updated_at' => 'setUpdatedAt',
        'webhook_url' => 'setWebhookUrl',
        'demo' => 'setDemo',
        'defaults' => 'setDefaults',
        'field_order' => 'setFieldOrder',
        'fields' => 'setFields',
        'footer_html' => 'setFooterHtml',
        'header_html' => 'setHeaderHtml',
        'html_engine_options' => 'setHtmlEngineOptions',
        'html' => 'setHtml',
        'predefined_fields' => 'setPredefinedFields',
        'scss' => 'setScss',
        'shared_field_data' => 'setSharedFieldData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_data_request_submission_id_footers' => 'getAddDataRequestSubmissionIdFooters',
        'allow_additional_properties' => 'getAllowAdditionalProperties',
        'description' => 'getDescription',
        'document_filename' => 'getDocumentFilename',
        'document_md5' => 'getDocumentMd5',
        'document_parse_error' => 'getDocumentParseError',
        'document_processed' => 'getDocumentProcessed',
        'document_state' => 'getDocumentState',
        'document_url' => 'getDocumentUrl',
        'editable_submissions' => 'getEditableSubmissions',
        'embed_domains' => 'getEmbedDomains',
        'encrypt_pdfs_password' => 'getEncryptPdfsPassword',
        'encrypt_pdfs' => 'getEncryptPdfs',
        'expiration_interval' => 'getExpirationInterval',
        'expire_after' => 'getExpireAfter',
        'expire_submissions' => 'getExpireSubmissions',
        'external_predefined_fields_template_id' => 'getExternalPredefinedFieldsTemplateId',
        'external_predefined_fields_template_name' => 'getExternalPredefinedFieldsTemplateName',
        'first_template' => 'getFirstTemplate',
        'id' => 'getId',
        'locked' => 'getLocked',
        'merge_audit_trail_pdf' => 'getMergeAuditTrailPdf',
        'name' => 'getName',
        'page_count' => 'getPageCount',
        'page_dimensions' => 'getPageDimensions',
        'parent_folder_id' => 'getParentFolderId',
        'path' => 'getPath',
        'permanent_document_url' => 'getPermanentDocumentUrl',
        'public_submissions' => 'getPublicSubmissions',
        'public_web_form' => 'getPublicWebForm',
        'redirect_url' => 'getRedirectUrl',
        'slack_webhook_url' => 'getSlackWebhookUrl',
        'template_type' => 'getTemplateType',
        'updated_at' => 'getUpdatedAt',
        'webhook_url' => 'getWebhookUrl',
        'demo' => 'getDemo',
        'defaults' => 'getDefaults',
        'field_order' => 'getFieldOrder',
        'fields' => 'getFields',
        'footer_html' => 'getFooterHtml',
        'header_html' => 'getHeaderHtml',
        'html_engine_options' => 'getHtmlEngineOptions',
        'html' => 'getHtml',
        'predefined_fields' => 'getPredefinedFields',
        'scss' => 'getScss',
        'shared_field_data' => 'getSharedFieldData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_STATE_PENDING = 'pending';
    public const DOCUMENT_STATE_PROCESSED = 'processed';
    public const DOCUMENT_STATE_PASSWORD_REQUIRED = 'password_required';
    public const DOCUMENT_STATE_MALFORMED_PDF = 'malformed_pdf';
    public const DOCUMENT_STATE_UNKNOWN_ERROR = 'unknown_error';
    public const TEMPLATE_TYPE_PDF = 'pdf';
    public const TEMPLATE_TYPE_HTML = 'html';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentStateAllowableValues()
    {
        return [
            self::DOCUMENT_STATE_PENDING,
            self::DOCUMENT_STATE_PROCESSED,
            self::DOCUMENT_STATE_PASSWORD_REQUIRED,
            self::DOCUMENT_STATE_MALFORMED_PDF,
            self::DOCUMENT_STATE_UNKNOWN_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_PDF,
            self::TEMPLATE_TYPE_HTML,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('add_data_request_submission_id_footers', $data ?? [], null);
        $this->setIfExists('allow_additional_properties', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('document_filename', $data ?? [], null);
        $this->setIfExists('document_md5', $data ?? [], null);
        $this->setIfExists('document_parse_error', $data ?? [], null);
        $this->setIfExists('document_processed', $data ?? [], null);
        $this->setIfExists('document_state', $data ?? [], null);
        $this->setIfExists('document_url', $data ?? [], null);
        $this->setIfExists('editable_submissions', $data ?? [], null);
        $this->setIfExists('embed_domains', $data ?? [], null);
        $this->setIfExists('encrypt_pdfs_password', $data ?? [], null);
        $this->setIfExists('encrypt_pdfs', $data ?? [], null);
        $this->setIfExists('expiration_interval', $data ?? [], null);
        $this->setIfExists('expire_after', $data ?? [], null);
        $this->setIfExists('expire_submissions', $data ?? [], null);
        $this->setIfExists('external_predefined_fields_template_id', $data ?? [], null);
        $this->setIfExists('external_predefined_fields_template_name', $data ?? [], null);
        $this->setIfExists('first_template', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('merge_audit_trail_pdf', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('page_count', $data ?? [], null);
        $this->setIfExists('page_dimensions', $data ?? [], null);
        $this->setIfExists('parent_folder_id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('permanent_document_url', $data ?? [], null);
        $this->setIfExists('public_submissions', $data ?? [], null);
        $this->setIfExists('public_web_form', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('slack_webhook_url', $data ?? [], null);
        $this->setIfExists('template_type', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('webhook_url', $data ?? [], null);
        $this->setIfExists('demo', $data ?? [], null);
        $this->setIfExists('defaults', $data ?? [], null);
        $this->setIfExists('field_order', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('footer_html', $data ?? [], null);
        $this->setIfExists('header_html', $data ?? [], null);
        $this->setIfExists('html_engine_options', $data ?? [], null);
        $this->setIfExists('html', $data ?? [], null);
        $this->setIfExists('predefined_fields', $data ?? [], null);
        $this->setIfExists('scss', $data ?? [], null);
        $this->setIfExists('shared_field_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['add_data_request_submission_id_footers'] === null) {
            $invalidProperties[] = "'add_data_request_submission_id_footers' can't be null";
        }
        if ($this->container['allow_additional_properties'] === null) {
            $invalidProperties[] = "'allow_additional_properties' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['document_filename'] === null) {
            $invalidProperties[] = "'document_filename' can't be null";
        }
        if ($this->container['document_md5'] === null) {
            $invalidProperties[] = "'document_md5' can't be null";
        }
        if ($this->container['document_parse_error'] === null) {
            $invalidProperties[] = "'document_parse_error' can't be null";
        }
        if ($this->container['document_processed'] === null) {
            $invalidProperties[] = "'document_processed' can't be null";
        }
        if ($this->container['document_state'] === null) {
            $invalidProperties[] = "'document_state' can't be null";
        }
        $allowedValues = $this->getDocumentStateAllowableValues();
        if (!is_null($this->container['document_state']) && !in_array($this->container['document_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_state', must be one of '%s'",
                $this->container['document_state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['document_url'] === null) {
            $invalidProperties[] = "'document_url' can't be null";
        }
        if ($this->container['editable_submissions'] === null) {
            $invalidProperties[] = "'editable_submissions' can't be null";
        }
        if ($this->container['embed_domains'] === null) {
            $invalidProperties[] = "'embed_domains' can't be null";
        }
        if ($this->container['encrypt_pdfs_password'] === null) {
            $invalidProperties[] = "'encrypt_pdfs_password' can't be null";
        }
        if ($this->container['encrypt_pdfs'] === null) {
            $invalidProperties[] = "'encrypt_pdfs' can't be null";
        }
        if ($this->container['expiration_interval'] === null) {
            $invalidProperties[] = "'expiration_interval' can't be null";
        }
        if ($this->container['expire_after'] === null) {
            $invalidProperties[] = "'expire_after' can't be null";
        }
        if ($this->container['expire_submissions'] === null) {
            $invalidProperties[] = "'expire_submissions' can't be null";
        }
        if ($this->container['external_predefined_fields_template_id'] === null) {
            $invalidProperties[] = "'external_predefined_fields_template_id' can't be null";
        }
        if ($this->container['external_predefined_fields_template_name'] === null) {
            $invalidProperties[] = "'external_predefined_fields_template_name' can't be null";
        }
        if ($this->container['first_template'] === null) {
            $invalidProperties[] = "'first_template' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['merge_audit_trail_pdf'] === null) {
            $invalidProperties[] = "'merge_audit_trail_pdf' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['page_count'] === null) {
            $invalidProperties[] = "'page_count' can't be null";
        }
        if ($this->container['page_dimensions'] === null) {
            $invalidProperties[] = "'page_dimensions' can't be null";
        }
        if ($this->container['parent_folder_id'] === null) {
            $invalidProperties[] = "'parent_folder_id' can't be null";
        }
        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['permanent_document_url'] === null) {
            $invalidProperties[] = "'permanent_document_url' can't be null";
        }
        if ($this->container['public_submissions'] === null) {
            $invalidProperties[] = "'public_submissions' can't be null";
        }
        if ($this->container['public_web_form'] === null) {
            $invalidProperties[] = "'public_web_form' can't be null";
        }
        if ($this->container['redirect_url'] === null) {
            $invalidProperties[] = "'redirect_url' can't be null";
        }
        if ($this->container['slack_webhook_url'] === null) {
            $invalidProperties[] = "'slack_webhook_url' can't be null";
        }
        if ($this->container['template_type'] === null) {
            $invalidProperties[] = "'template_type' can't be null";
        }
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($this->container['template_type']) && !in_array($this->container['template_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'template_type', must be one of '%s'",
                $this->container['template_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['webhook_url'] === null) {
            $invalidProperties[] = "'webhook_url' can't be null";
        }
        if ($this->container['demo'] === null) {
            $invalidProperties[] = "'demo' can't be null";
        }
        if ($this->container['defaults'] === null) {
            $invalidProperties[] = "'defaults' can't be null";
        }
        if ($this->container['field_order'] === null) {
            $invalidProperties[] = "'field_order' can't be null";
        }
        if ($this->container['fields'] === null) {
            $invalidProperties[] = "'fields' can't be null";
        }
        if ($this->container['footer_html'] === null) {
            $invalidProperties[] = "'footer_html' can't be null";
        }
        if ($this->container['header_html'] === null) {
            $invalidProperties[] = "'header_html' can't be null";
        }
        if ($this->container['html_engine_options'] === null) {
            $invalidProperties[] = "'html_engine_options' can't be null";
        }
        if ($this->container['html'] === null) {
            $invalidProperties[] = "'html' can't be null";
        }
        if ($this->container['predefined_fields'] === null) {
            $invalidProperties[] = "'predefined_fields' can't be null";
        }
        if ($this->container['scss'] === null) {
            $invalidProperties[] = "'scss' can't be null";
        }
        if ($this->container['shared_field_data'] === null) {
            $invalidProperties[] = "'shared_field_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_data_request_submission_id_footers
     *
     * @return bool
     */
    public function getAddDataRequestSubmissionIdFooters()
    {
        return $this->container['add_data_request_submission_id_footers'];
    }

    /**
     * Sets add_data_request_submission_id_footers
     *
     * @param bool $add_data_request_submission_id_footers add_data_request_submission_id_footers
     *
     * @return self
     */
    public function setAddDataRequestSubmissionIdFooters($add_data_request_submission_id_footers)
    {
        if (is_null($add_data_request_submission_id_footers)) {
            throw new \InvalidArgumentException('non-nullable add_data_request_submission_id_footers cannot be null');
        }
        $this->container['add_data_request_submission_id_footers'] = $add_data_request_submission_id_footers;

        return $this;
    }

    /**
     * Gets allow_additional_properties
     *
     * @return bool
     */
    public function getAllowAdditionalProperties()
    {
        return $this->container['allow_additional_properties'];
    }

    /**
     * Sets allow_additional_properties
     *
     * @param bool $allow_additional_properties allow_additional_properties
     *
     * @return self
     */
    public function setAllowAdditionalProperties($allow_additional_properties)
    {
        if (is_null($allow_additional_properties)) {
            throw new \InvalidArgumentException('non-nullable allow_additional_properties cannot be null');
        }
        $this->container['allow_additional_properties'] = $allow_additional_properties;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_filename
     *
     * @return string
     */
    public function getDocumentFilename()
    {
        return $this->container['document_filename'];
    }

    /**
     * Sets document_filename
     *
     * @param string $document_filename document_filename
     *
     * @return self
     */
    public function setDocumentFilename($document_filename)
    {
        if (is_null($document_filename)) {
            array_push($this->openAPINullablesSetToNull, 'document_filename');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_filename', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_filename'] = $document_filename;

        return $this;
    }

    /**
     * Gets document_md5
     *
     * @return string
     */
    public function getDocumentMd5()
    {
        return $this->container['document_md5'];
    }

    /**
     * Sets document_md5
     *
     * @param string $document_md5 document_md5
     *
     * @return self
     */
    public function setDocumentMd5($document_md5)
    {
        if (is_null($document_md5)) {
            array_push($this->openAPINullablesSetToNull, 'document_md5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_md5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_md5'] = $document_md5;

        return $this;
    }

    /**
     * Gets document_parse_error
     *
     * @return bool
     */
    public function getDocumentParseError()
    {
        return $this->container['document_parse_error'];
    }

    /**
     * Sets document_parse_error
     *
     * @param bool $document_parse_error document_parse_error
     *
     * @return self
     */
    public function setDocumentParseError($document_parse_error)
    {
        if (is_null($document_parse_error)) {
            throw new \InvalidArgumentException('non-nullable document_parse_error cannot be null');
        }
        $this->container['document_parse_error'] = $document_parse_error;

        return $this;
    }

    /**
     * Gets document_processed
     *
     * @return bool
     */
    public function getDocumentProcessed()
    {
        return $this->container['document_processed'];
    }

    /**
     * Sets document_processed
     *
     * @param bool $document_processed document_processed
     *
     * @return self
     */
    public function setDocumentProcessed($document_processed)
    {
        if (is_null($document_processed)) {
            throw new \InvalidArgumentException('non-nullable document_processed cannot be null');
        }
        $this->container['document_processed'] = $document_processed;

        return $this;
    }

    /**
     * Gets document_state
     *
     * @return string
     */
    public function getDocumentState()
    {
        return $this->container['document_state'];
    }

    /**
     * Sets document_state
     *
     * @param string $document_state document_state
     *
     * @return self
     */
    public function setDocumentState($document_state)
    {
        if (is_null($document_state)) {
            throw new \InvalidArgumentException('non-nullable document_state cannot be null');
        }
        $allowedValues = $this->getDocumentStateAllowableValues();
        if (!in_array($document_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_state', must be one of '%s'",
                    $document_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_state'] = $document_state;

        return $this;
    }

    /**
     * Gets document_url
     *
     * @return string
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     *
     * @param string $document_url document_url
     *
     * @return self
     */
    public function setDocumentUrl($document_url)
    {
        if (is_null($document_url)) {
            array_push($this->openAPINullablesSetToNull, 'document_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets editable_submissions
     *
     * @return bool
     */
    public function getEditableSubmissions()
    {
        return $this->container['editable_submissions'];
    }

    /**
     * Sets editable_submissions
     *
     * @param bool $editable_submissions editable_submissions
     *
     * @return self
     */
    public function setEditableSubmissions($editable_submissions)
    {
        if (is_null($editable_submissions)) {
            throw new \InvalidArgumentException('non-nullable editable_submissions cannot be null');
        }
        $this->container['editable_submissions'] = $editable_submissions;

        return $this;
    }

    /**
     * Gets embed_domains
     *
     * @return string
     */
    public function getEmbedDomains()
    {
        return $this->container['embed_domains'];
    }

    /**
     * Sets embed_domains
     *
     * @param string $embed_domains embed_domains
     *
     * @return self
     */
    public function setEmbedDomains($embed_domains)
    {
        if (is_null($embed_domains)) {
            array_push($this->openAPINullablesSetToNull, 'embed_domains');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('embed_domains', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['embed_domains'] = $embed_domains;

        return $this;
    }

    /**
     * Gets encrypt_pdfs_password
     *
     * @return string
     */
    public function getEncryptPdfsPassword()
    {
        return $this->container['encrypt_pdfs_password'];
    }

    /**
     * Sets encrypt_pdfs_password
     *
     * @param string $encrypt_pdfs_password encrypt_pdfs_password
     *
     * @return self
     */
    public function setEncryptPdfsPassword($encrypt_pdfs_password)
    {
        if (is_null($encrypt_pdfs_password)) {
            array_push($this->openAPINullablesSetToNull, 'encrypt_pdfs_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encrypt_pdfs_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['encrypt_pdfs_password'] = $encrypt_pdfs_password;

        return $this;
    }

    /**
     * Gets encrypt_pdfs
     *
     * @return bool
     */
    public function getEncryptPdfs()
    {
        return $this->container['encrypt_pdfs'];
    }

    /**
     * Sets encrypt_pdfs
     *
     * @param bool $encrypt_pdfs encrypt_pdfs
     *
     * @return self
     */
    public function setEncryptPdfs($encrypt_pdfs)
    {
        if (is_null($encrypt_pdfs)) {
            throw new \InvalidArgumentException('non-nullable encrypt_pdfs cannot be null');
        }
        $this->container['encrypt_pdfs'] = $encrypt_pdfs;

        return $this;
    }

    /**
     * Gets expiration_interval
     *
     * @return string
     */
    public function getExpirationInterval()
    {
        return $this->container['expiration_interval'];
    }

    /**
     * Sets expiration_interval
     *
     * @param string $expiration_interval expiration_interval
     *
     * @return self
     */
    public function setExpirationInterval($expiration_interval)
    {
        if (is_null($expiration_interval)) {
            throw new \InvalidArgumentException('non-nullable expiration_interval cannot be null');
        }
        $this->container['expiration_interval'] = $expiration_interval;

        return $this;
    }

    /**
     * Gets expire_after
     *
     * @return int
     */
    public function getExpireAfter()
    {
        return $this->container['expire_after'];
    }

    /**
     * Sets expire_after
     *
     * @param int $expire_after expire_after
     *
     * @return self
     */
    public function setExpireAfter($expire_after)
    {
        if (is_null($expire_after)) {
            throw new \InvalidArgumentException('non-nullable expire_after cannot be null');
        }
        $this->container['expire_after'] = $expire_after;

        return $this;
    }

    /**
     * Gets expire_submissions
     *
     * @return bool
     */
    public function getExpireSubmissions()
    {
        return $this->container['expire_submissions'];
    }

    /**
     * Sets expire_submissions
     *
     * @param bool $expire_submissions expire_submissions
     *
     * @return self
     */
    public function setExpireSubmissions($expire_submissions)
    {
        if (is_null($expire_submissions)) {
            throw new \InvalidArgumentException('non-nullable expire_submissions cannot be null');
        }
        $this->container['expire_submissions'] = $expire_submissions;

        return $this;
    }

    /**
     * Gets external_predefined_fields_template_id
     *
     * @return string
     */
    public function getExternalPredefinedFieldsTemplateId()
    {
        return $this->container['external_predefined_fields_template_id'];
    }

    /**
     * Sets external_predefined_fields_template_id
     *
     * @param string $external_predefined_fields_template_id external_predefined_fields_template_id
     *
     * @return self
     */
    public function setExternalPredefinedFieldsTemplateId($external_predefined_fields_template_id)
    {
        if (is_null($external_predefined_fields_template_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_predefined_fields_template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_predefined_fields_template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_predefined_fields_template_id'] = $external_predefined_fields_template_id;

        return $this;
    }

    /**
     * Gets external_predefined_fields_template_name
     *
     * @return string
     */
    public function getExternalPredefinedFieldsTemplateName()
    {
        return $this->container['external_predefined_fields_template_name'];
    }

    /**
     * Sets external_predefined_fields_template_name
     *
     * @param string $external_predefined_fields_template_name external_predefined_fields_template_name
     *
     * @return self
     */
    public function setExternalPredefinedFieldsTemplateName($external_predefined_fields_template_name)
    {
        if (is_null($external_predefined_fields_template_name)) {
            array_push($this->openAPINullablesSetToNull, 'external_predefined_fields_template_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_predefined_fields_template_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_predefined_fields_template_name'] = $external_predefined_fields_template_name;

        return $this;
    }

    /**
     * Gets first_template
     *
     * @return bool
     */
    public function getFirstTemplate()
    {
        return $this->container['first_template'];
    }

    /**
     * Sets first_template
     *
     * @param bool $first_template first_template
     *
     * @return self
     */
    public function setFirstTemplate($first_template)
    {
        if (is_null($first_template)) {
            throw new \InvalidArgumentException('non-nullable first_template cannot be null');
        }
        $this->container['first_template'] = $first_template;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets merge_audit_trail_pdf
     *
     * @return bool
     */
    public function getMergeAuditTrailPdf()
    {
        return $this->container['merge_audit_trail_pdf'];
    }

    /**
     * Sets merge_audit_trail_pdf
     *
     * @param bool $merge_audit_trail_pdf merge_audit_trail_pdf
     *
     * @return self
     */
    public function setMergeAuditTrailPdf($merge_audit_trail_pdf)
    {
        if (is_null($merge_audit_trail_pdf)) {
            throw new \InvalidArgumentException('non-nullable merge_audit_trail_pdf cannot be null');
        }
        $this->container['merge_audit_trail_pdf'] = $merge_audit_trail_pdf;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int $page_count page_count
     *
     * @return self
     */
    public function setPageCount($page_count)
    {
        if (is_null($page_count)) {
            throw new \InvalidArgumentException('non-nullable page_count cannot be null');
        }
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets page_dimensions
     *
     * @return float[][]
     */
    public function getPageDimensions()
    {
        return $this->container['page_dimensions'];
    }

    /**
     * Sets page_dimensions
     *
     * @param float[][] $page_dimensions page_dimensions
     *
     * @return self
     */
    public function setPageDimensions($page_dimensions)
    {
        if (is_null($page_dimensions)) {
            array_push($this->openAPINullablesSetToNull, 'page_dimensions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_dimensions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_dimensions'] = $page_dimensions;

        return $this;
    }

    /**
     * Gets parent_folder_id
     *
     * @return string
     */
    public function getParentFolderId()
    {
        return $this->container['parent_folder_id'];
    }

    /**
     * Sets parent_folder_id
     *
     * @param string $parent_folder_id parent_folder_id
     *
     * @return self
     */
    public function setParentFolderId($parent_folder_id)
    {
        if (is_null($parent_folder_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_folder_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_folder_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_folder_id'] = $parent_folder_id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets permanent_document_url
     *
     * @return string
     */
    public function getPermanentDocumentUrl()
    {
        return $this->container['permanent_document_url'];
    }

    /**
     * Sets permanent_document_url
     *
     * @param string $permanent_document_url permanent_document_url
     *
     * @return self
     */
    public function setPermanentDocumentUrl($permanent_document_url)
    {
        if (is_null($permanent_document_url)) {
            array_push($this->openAPINullablesSetToNull, 'permanent_document_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permanent_document_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['permanent_document_url'] = $permanent_document_url;

        return $this;
    }

    /**
     * Gets public_submissions
     *
     * @return bool
     */
    public function getPublicSubmissions()
    {
        return $this->container['public_submissions'];
    }

    /**
     * Sets public_submissions
     *
     * @param bool $public_submissions public_submissions
     *
     * @return self
     */
    public function setPublicSubmissions($public_submissions)
    {
        if (is_null($public_submissions)) {
            throw new \InvalidArgumentException('non-nullable public_submissions cannot be null');
        }
        $this->container['public_submissions'] = $public_submissions;

        return $this;
    }

    /**
     * Gets public_web_form
     *
     * @return bool
     */
    public function getPublicWebForm()
    {
        return $this->container['public_web_form'];
    }

    /**
     * Sets public_web_form
     *
     * @param bool $public_web_form public_web_form
     *
     * @return self
     */
    public function setPublicWebForm($public_web_form)
    {
        if (is_null($public_web_form)) {
            throw new \InvalidArgumentException('non-nullable public_web_form cannot be null');
        }
        $this->container['public_web_form'] = $public_web_form;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets slack_webhook_url
     *
     * @return string
     */
    public function getSlackWebhookUrl()
    {
        return $this->container['slack_webhook_url'];
    }

    /**
     * Sets slack_webhook_url
     *
     * @param string $slack_webhook_url slack_webhook_url
     *
     * @return self
     */
    public function setSlackWebhookUrl($slack_webhook_url)
    {
        if (is_null($slack_webhook_url)) {
            array_push($this->openAPINullablesSetToNull, 'slack_webhook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('slack_webhook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['slack_webhook_url'] = $slack_webhook_url;

        return $this;
    }

    /**
     * Gets template_type
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param string $template_type template_type
     *
     * @return self
     */
    public function setTemplateType($template_type)
    {
        if (is_null($template_type)) {
            throw new \InvalidArgumentException('non-nullable template_type cannot be null');
        }
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!in_array($template_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'template_type', must be one of '%s'",
                    $template_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_type'] = $template_type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string $webhook_url webhook_url
     *
     * @return self
     */
    public function setWebhookUrl($webhook_url)
    {
        if (is_null($webhook_url)) {
            array_push($this->openAPINullablesSetToNull, 'webhook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets demo
     *
     * @return bool
     */
    public function getDemo()
    {
        return $this->container['demo'];
    }

    /**
     * Sets demo
     *
     * @param bool $demo demo
     *
     * @return self
     */
    public function setDemo($demo)
    {
        if (is_null($demo)) {
            throw new \InvalidArgumentException('non-nullable demo cannot be null');
        }
        $this->container['demo'] = $demo;

        return $this;
    }

    /**
     * Gets defaults
     *
     * @return object
     */
    public function getDefaults()
    {
        return $this->container['defaults'];
    }

    /**
     * Sets defaults
     *
     * @param object $defaults defaults
     *
     * @return self
     */
    public function setDefaults($defaults)
    {
        if (is_null($defaults)) {
            throw new \InvalidArgumentException('non-nullable defaults cannot be null');
        }
        $this->container['defaults'] = $defaults;

        return $this;
    }

    /**
     * Gets field_order
     *
     * @return float[][]
     */
    public function getFieldOrder()
    {
        return $this->container['field_order'];
    }

    /**
     * Sets field_order
     *
     * @param float[][] $field_order field_order
     *
     * @return self
     */
    public function setFieldOrder($field_order)
    {
        if (is_null($field_order)) {
            throw new \InvalidArgumentException('non-nullable field_order cannot be null');
        }
        $this->container['field_order'] = $field_order;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return object
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param object $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets footer_html
     *
     * @return string
     */
    public function getFooterHtml()
    {
        return $this->container['footer_html'];
    }

    /**
     * Sets footer_html
     *
     * @param string $footer_html footer_html
     *
     * @return self
     */
    public function setFooterHtml($footer_html)
    {
        if (is_null($footer_html)) {
            array_push($this->openAPINullablesSetToNull, 'footer_html');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('footer_html', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['footer_html'] = $footer_html;

        return $this;
    }

    /**
     * Gets header_html
     *
     * @return string
     */
    public function getHeaderHtml()
    {
        return $this->container['header_html'];
    }

    /**
     * Sets header_html
     *
     * @param string $header_html header_html
     *
     * @return self
     */
    public function setHeaderHtml($header_html)
    {
        if (is_null($header_html)) {
            array_push($this->openAPINullablesSetToNull, 'header_html');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_html', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['header_html'] = $header_html;

        return $this;
    }

    /**
     * Gets html_engine_options
     *
     * @return object
     */
    public function getHtmlEngineOptions()
    {
        return $this->container['html_engine_options'];
    }

    /**
     * Sets html_engine_options
     *
     * @param object $html_engine_options html_engine_options
     *
     * @return self
     */
    public function setHtmlEngineOptions($html_engine_options)
    {
        if (is_null($html_engine_options)) {
            throw new \InvalidArgumentException('non-nullable html_engine_options cannot be null');
        }
        $this->container['html_engine_options'] = $html_engine_options;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html html
     *
     * @return self
     */
    public function setHtml($html)
    {
        if (is_null($html)) {
            array_push($this->openAPINullablesSetToNull, 'html');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('html', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets predefined_fields
     *
     * @return object[]
     */
    public function getPredefinedFields()
    {
        return $this->container['predefined_fields'];
    }

    /**
     * Sets predefined_fields
     *
     * @param object[] $predefined_fields predefined_fields
     *
     * @return self
     */
    public function setPredefinedFields($predefined_fields)
    {
        if (is_null($predefined_fields)) {
            throw new \InvalidArgumentException('non-nullable predefined_fields cannot be null');
        }
        $this->container['predefined_fields'] = $predefined_fields;

        return $this;
    }

    /**
     * Gets scss
     *
     * @return string
     */
    public function getScss()
    {
        return $this->container['scss'];
    }

    /**
     * Sets scss
     *
     * @param string $scss scss
     *
     * @return self
     */
    public function setScss($scss)
    {
        if (is_null($scss)) {
            array_push($this->openAPINullablesSetToNull, 'scss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scss'] = $scss;

        return $this;
    }

    /**
     * Gets shared_field_data
     *
     * @return object
     */
    public function getSharedFieldData()
    {
        return $this->container['shared_field_data'];
    }

    /**
     * Sets shared_field_data
     *
     * @param object $shared_field_data shared_field_data
     *
     * @return self
     */
    public function setSharedFieldData($shared_field_data)
    {
        if (is_null($shared_field_data)) {
            throw new \InvalidArgumentException('non-nullable shared_field_data cannot be null');
        }
        $this->container['shared_field_data'] = $shared_field_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


