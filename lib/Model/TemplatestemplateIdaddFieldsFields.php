<?php
/**
 * TemplatestemplateIdaddFieldsFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocSpring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocSpring\Model;

use \ArrayAccess;
use \DocSpring\ObjectSerializer;

/**
 * TemplatestemplateIdaddFieldsFields Class Doc Comment
 *
 * @category Class
 * @package  DocSpring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TemplatestemplateIdaddFieldsFields implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'templatestemplate_idadd_fields_fields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'background_color_field_name' => 'string',
        'uppercase' => 'bool',
        'metadata' => 'string',
        'barcode_symbology' => 'string',
        'min_length' => 'float',
        'integer' => 'bool',
        'type' => 'string',
        'required' => 'bool',
        'comb_value_offset' => 'float',
        'image_gravity' => 'string',
        'overflow' => 'string',
        'qrcode_color' => 'string',
        'color_field_required' => 'bool',
        'background_color_field_required' => 'bool',
        'id' => 'float',
        'image_scale_type' => 'string',
        'exclusive_minimum' => 'bool',
        'height' => 'float',
        'number_condition_range_exclusive_max' => 'bool',
        'invert_boolean_condition' => 'bool',
        'shape_fill_color_field_name' => 'string',
        'static' => 'bool',
        'shape_border_color_field_name' => 'string',
        'v_alignment' => 'string',
        'bold' => 'bool',
        'shape_border_width' => 'float',
        'comb_number_of_cells' => 'float',
        'shape_border_color' => 'string',
        'comb' => 'bool',
        'typeface' => 'string',
        'shape_type' => 'string',
        'condition' => 'string',
        'display_type' => 'string',
        'check_color' => 'string',
        'multiline_lines' => 'float',
        'multiline' => 'bool',
        'true_text' => 'string',
        'name' => 'string',
        'font_size' => 'float',
        'page' => 'float',
        'alignment' => 'string',
        'max_length' => 'float',
        'auto_calculate_max_length' => 'bool',
        'color_field_name' => 'string',
        'qrcode_color_field_name' => 'string',
        'number_condition_range_min' => 'float',
        'color' => 'string',
        'hidden' => 'bool',
        'check_color_field_required' => 'bool',
        'combined_field_format' => 'string',
        'description' => 'string',
        'shape_border_color_field_required' => 'bool',
        'combined_field_names' => 'string',
        'title' => 'string',
        'number_condition_range_exclusive_min' => 'bool',
        'combined_field_separator' => 'string',
        'exclusive_maximum' => 'bool',
        'default' => 'string',
        'combined_field_type' => 'string',
        'date_time_format' => 'string',
        'qrcode_color_field_required' => 'bool',
        'currency' => 'bool',
        'false_text' => 'string',
        'placeholder' => 'string',
        'strikethrough' => 'bool',
        'character_spacing' => 'float',
        'number_condition_range_max' => 'float',
        'background_color' => 'string',
        'check_color_field_name' => 'string',
        'check_character' => 'string',
        'rotation' => 'float',
        'option_list' => 'string',
        'shape_fill_color' => 'string',
        'string_condition_type' => 'string',
        'shape_fill_color_field_required' => 'bool',
        'decimal_places' => 'float',
        'include_time' => 'bool',
        'width' => 'float',
        'x' => 'float',
        'maximum' => 'float',
        'y' => 'float',
        'signature_allow_draw' => 'bool',
        'number_condition_type' => 'string',
        'opacity' => 'float',
        'minimum' => 'float',
        'signature_allow_type' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'background_color_field_name' => null,
        'uppercase' => null,
        'metadata' => null,
        'barcode_symbology' => null,
        'min_length' => null,
        'integer' => null,
        'type' => null,
        'required' => null,
        'comb_value_offset' => null,
        'image_gravity' => null,
        'overflow' => null,
        'qrcode_color' => null,
        'color_field_required' => null,
        'background_color_field_required' => null,
        'id' => null,
        'image_scale_type' => null,
        'exclusive_minimum' => null,
        'height' => null,
        'number_condition_range_exclusive_max' => null,
        'invert_boolean_condition' => null,
        'shape_fill_color_field_name' => null,
        'static' => null,
        'shape_border_color_field_name' => null,
        'v_alignment' => null,
        'bold' => null,
        'shape_border_width' => null,
        'comb_number_of_cells' => null,
        'shape_border_color' => null,
        'comb' => null,
        'typeface' => null,
        'shape_type' => null,
        'condition' => null,
        'display_type' => null,
        'check_color' => null,
        'multiline_lines' => null,
        'multiline' => null,
        'true_text' => null,
        'name' => null,
        'font_size' => null,
        'page' => null,
        'alignment' => null,
        'max_length' => null,
        'auto_calculate_max_length' => null,
        'color_field_name' => null,
        'qrcode_color_field_name' => null,
        'number_condition_range_min' => null,
        'color' => null,
        'hidden' => null,
        'check_color_field_required' => null,
        'combined_field_format' => null,
        'description' => null,
        'shape_border_color_field_required' => null,
        'combined_field_names' => null,
        'title' => null,
        'number_condition_range_exclusive_min' => null,
        'combined_field_separator' => null,
        'exclusive_maximum' => null,
        'default' => null,
        'combined_field_type' => null,
        'date_time_format' => null,
        'qrcode_color_field_required' => null,
        'currency' => null,
        'false_text' => null,
        'placeholder' => null,
        'strikethrough' => null,
        'character_spacing' => null,
        'number_condition_range_max' => null,
        'background_color' => null,
        'check_color_field_name' => null,
        'check_character' => null,
        'rotation' => null,
        'option_list' => null,
        'shape_fill_color' => null,
        'string_condition_type' => null,
        'shape_fill_color_field_required' => null,
        'decimal_places' => null,
        'include_time' => null,
        'width' => null,
        'x' => null,
        'maximum' => null,
        'y' => null,
        'signature_allow_draw' => null,
        'number_condition_type' => null,
        'opacity' => null,
        'minimum' => null,
        'signature_allow_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'background_color_field_name' => 'backgroundColorFieldName',
        'uppercase' => 'uppercase',
        'metadata' => 'metadata',
        'barcode_symbology' => 'barcodeSymbology',
        'min_length' => 'minLength',
        'integer' => 'integer',
        'type' => 'type',
        'required' => 'required',
        'comb_value_offset' => 'combValueOffset',
        'image_gravity' => 'imageGravity',
        'overflow' => 'overflow',
        'qrcode_color' => 'qrcodeColor',
        'color_field_required' => 'colorFieldRequired',
        'background_color_field_required' => 'backgroundColorFieldRequired',
        'id' => 'id',
        'image_scale_type' => 'imageScaleType',
        'exclusive_minimum' => 'exclusiveMinimum',
        'height' => 'height',
        'number_condition_range_exclusive_max' => 'numberConditionRangeExclusiveMax',
        'invert_boolean_condition' => 'invertBooleanCondition',
        'shape_fill_color_field_name' => 'shapeFillColorFieldName',
        'static' => 'static',
        'shape_border_color_field_name' => 'shapeBorderColorFieldName',
        'v_alignment' => 'vAlignment',
        'bold' => 'bold',
        'shape_border_width' => 'shapeBorderWidth',
        'comb_number_of_cells' => 'combNumberOfCells',
        'shape_border_color' => 'shapeBorderColor',
        'comb' => 'comb',
        'typeface' => 'typeface',
        'shape_type' => 'shapeType',
        'condition' => 'condition',
        'display_type' => 'displayType',
        'check_color' => 'checkColor',
        'multiline_lines' => 'multilineLines',
        'multiline' => 'multiline',
        'true_text' => 'trueText',
        'name' => 'name',
        'font_size' => 'fontSize',
        'page' => 'page',
        'alignment' => 'alignment',
        'max_length' => 'maxLength',
        'auto_calculate_max_length' => 'autoCalculateMaxLength',
        'color_field_name' => 'colorFieldName',
        'qrcode_color_field_name' => 'qrcodeColorFieldName',
        'number_condition_range_min' => 'numberConditionRangeMin',
        'color' => 'color',
        'hidden' => 'hidden',
        'check_color_field_required' => 'checkColorFieldRequired',
        'combined_field_format' => 'combinedFieldFormat',
        'description' => 'description',
        'shape_border_color_field_required' => 'shapeBorderColorFieldRequired',
        'combined_field_names' => 'combinedFieldNames',
        'title' => 'title',
        'number_condition_range_exclusive_min' => 'numberConditionRangeExclusiveMin',
        'combined_field_separator' => 'combinedFieldSeparator',
        'exclusive_maximum' => 'exclusiveMaximum',
        'default' => 'default',
        'combined_field_type' => 'combinedFieldType',
        'date_time_format' => 'dateTimeFormat',
        'qrcode_color_field_required' => 'qrcodeColorFieldRequired',
        'currency' => 'currency',
        'false_text' => 'falseText',
        'placeholder' => 'placeholder',
        'strikethrough' => 'strikethrough',
        'character_spacing' => 'characterSpacing',
        'number_condition_range_max' => 'numberConditionRangeMax',
        'background_color' => 'backgroundColor',
        'check_color_field_name' => 'checkColorFieldName',
        'check_character' => 'checkCharacter',
        'rotation' => 'rotation',
        'option_list' => 'optionList',
        'shape_fill_color' => 'shapeFillColor',
        'string_condition_type' => 'stringConditionType',
        'shape_fill_color_field_required' => 'shapeFillColorFieldRequired',
        'decimal_places' => 'decimalPlaces',
        'include_time' => 'includeTime',
        'width' => 'width',
        'x' => 'x',
        'maximum' => 'maximum',
        'y' => 'y',
        'signature_allow_draw' => 'signatureAllowDraw',
        'number_condition_type' => 'numberConditionType',
        'opacity' => 'opacity',
        'minimum' => 'minimum',
        'signature_allow_type' => 'signatureAllowType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'background_color_field_name' => 'setBackgroundColorFieldName',
        'uppercase' => 'setUppercase',
        'metadata' => 'setMetadata',
        'barcode_symbology' => 'setBarcodeSymbology',
        'min_length' => 'setMinLength',
        'integer' => 'setInteger',
        'type' => 'setType',
        'required' => 'setRequired',
        'comb_value_offset' => 'setCombValueOffset',
        'image_gravity' => 'setImageGravity',
        'overflow' => 'setOverflow',
        'qrcode_color' => 'setQrcodeColor',
        'color_field_required' => 'setColorFieldRequired',
        'background_color_field_required' => 'setBackgroundColorFieldRequired',
        'id' => 'setId',
        'image_scale_type' => 'setImageScaleType',
        'exclusive_minimum' => 'setExclusiveMinimum',
        'height' => 'setHeight',
        'number_condition_range_exclusive_max' => 'setNumberConditionRangeExclusiveMax',
        'invert_boolean_condition' => 'setInvertBooleanCondition',
        'shape_fill_color_field_name' => 'setShapeFillColorFieldName',
        'static' => 'setStatic',
        'shape_border_color_field_name' => 'setShapeBorderColorFieldName',
        'v_alignment' => 'setVAlignment',
        'bold' => 'setBold',
        'shape_border_width' => 'setShapeBorderWidth',
        'comb_number_of_cells' => 'setCombNumberOfCells',
        'shape_border_color' => 'setShapeBorderColor',
        'comb' => 'setComb',
        'typeface' => 'setTypeface',
        'shape_type' => 'setShapeType',
        'condition' => 'setCondition',
        'display_type' => 'setDisplayType',
        'check_color' => 'setCheckColor',
        'multiline_lines' => 'setMultilineLines',
        'multiline' => 'setMultiline',
        'true_text' => 'setTrueText',
        'name' => 'setName',
        'font_size' => 'setFontSize',
        'page' => 'setPage',
        'alignment' => 'setAlignment',
        'max_length' => 'setMaxLength',
        'auto_calculate_max_length' => 'setAutoCalculateMaxLength',
        'color_field_name' => 'setColorFieldName',
        'qrcode_color_field_name' => 'setQrcodeColorFieldName',
        'number_condition_range_min' => 'setNumberConditionRangeMin',
        'color' => 'setColor',
        'hidden' => 'setHidden',
        'check_color_field_required' => 'setCheckColorFieldRequired',
        'combined_field_format' => 'setCombinedFieldFormat',
        'description' => 'setDescription',
        'shape_border_color_field_required' => 'setShapeBorderColorFieldRequired',
        'combined_field_names' => 'setCombinedFieldNames',
        'title' => 'setTitle',
        'number_condition_range_exclusive_min' => 'setNumberConditionRangeExclusiveMin',
        'combined_field_separator' => 'setCombinedFieldSeparator',
        'exclusive_maximum' => 'setExclusiveMaximum',
        'default' => 'setDefault',
        'combined_field_type' => 'setCombinedFieldType',
        'date_time_format' => 'setDateTimeFormat',
        'qrcode_color_field_required' => 'setQrcodeColorFieldRequired',
        'currency' => 'setCurrency',
        'false_text' => 'setFalseText',
        'placeholder' => 'setPlaceholder',
        'strikethrough' => 'setStrikethrough',
        'character_spacing' => 'setCharacterSpacing',
        'number_condition_range_max' => 'setNumberConditionRangeMax',
        'background_color' => 'setBackgroundColor',
        'check_color_field_name' => 'setCheckColorFieldName',
        'check_character' => 'setCheckCharacter',
        'rotation' => 'setRotation',
        'option_list' => 'setOptionList',
        'shape_fill_color' => 'setShapeFillColor',
        'string_condition_type' => 'setStringConditionType',
        'shape_fill_color_field_required' => 'setShapeFillColorFieldRequired',
        'decimal_places' => 'setDecimalPlaces',
        'include_time' => 'setIncludeTime',
        'width' => 'setWidth',
        'x' => 'setX',
        'maximum' => 'setMaximum',
        'y' => 'setY',
        'signature_allow_draw' => 'setSignatureAllowDraw',
        'number_condition_type' => 'setNumberConditionType',
        'opacity' => 'setOpacity',
        'minimum' => 'setMinimum',
        'signature_allow_type' => 'setSignatureAllowType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'background_color_field_name' => 'getBackgroundColorFieldName',
        'uppercase' => 'getUppercase',
        'metadata' => 'getMetadata',
        'barcode_symbology' => 'getBarcodeSymbology',
        'min_length' => 'getMinLength',
        'integer' => 'getInteger',
        'type' => 'getType',
        'required' => 'getRequired',
        'comb_value_offset' => 'getCombValueOffset',
        'image_gravity' => 'getImageGravity',
        'overflow' => 'getOverflow',
        'qrcode_color' => 'getQrcodeColor',
        'color_field_required' => 'getColorFieldRequired',
        'background_color_field_required' => 'getBackgroundColorFieldRequired',
        'id' => 'getId',
        'image_scale_type' => 'getImageScaleType',
        'exclusive_minimum' => 'getExclusiveMinimum',
        'height' => 'getHeight',
        'number_condition_range_exclusive_max' => 'getNumberConditionRangeExclusiveMax',
        'invert_boolean_condition' => 'getInvertBooleanCondition',
        'shape_fill_color_field_name' => 'getShapeFillColorFieldName',
        'static' => 'getStatic',
        'shape_border_color_field_name' => 'getShapeBorderColorFieldName',
        'v_alignment' => 'getVAlignment',
        'bold' => 'getBold',
        'shape_border_width' => 'getShapeBorderWidth',
        'comb_number_of_cells' => 'getCombNumberOfCells',
        'shape_border_color' => 'getShapeBorderColor',
        'comb' => 'getComb',
        'typeface' => 'getTypeface',
        'shape_type' => 'getShapeType',
        'condition' => 'getCondition',
        'display_type' => 'getDisplayType',
        'check_color' => 'getCheckColor',
        'multiline_lines' => 'getMultilineLines',
        'multiline' => 'getMultiline',
        'true_text' => 'getTrueText',
        'name' => 'getName',
        'font_size' => 'getFontSize',
        'page' => 'getPage',
        'alignment' => 'getAlignment',
        'max_length' => 'getMaxLength',
        'auto_calculate_max_length' => 'getAutoCalculateMaxLength',
        'color_field_name' => 'getColorFieldName',
        'qrcode_color_field_name' => 'getQrcodeColorFieldName',
        'number_condition_range_min' => 'getNumberConditionRangeMin',
        'color' => 'getColor',
        'hidden' => 'getHidden',
        'check_color_field_required' => 'getCheckColorFieldRequired',
        'combined_field_format' => 'getCombinedFieldFormat',
        'description' => 'getDescription',
        'shape_border_color_field_required' => 'getShapeBorderColorFieldRequired',
        'combined_field_names' => 'getCombinedFieldNames',
        'title' => 'getTitle',
        'number_condition_range_exclusive_min' => 'getNumberConditionRangeExclusiveMin',
        'combined_field_separator' => 'getCombinedFieldSeparator',
        'exclusive_maximum' => 'getExclusiveMaximum',
        'default' => 'getDefault',
        'combined_field_type' => 'getCombinedFieldType',
        'date_time_format' => 'getDateTimeFormat',
        'qrcode_color_field_required' => 'getQrcodeColorFieldRequired',
        'currency' => 'getCurrency',
        'false_text' => 'getFalseText',
        'placeholder' => 'getPlaceholder',
        'strikethrough' => 'getStrikethrough',
        'character_spacing' => 'getCharacterSpacing',
        'number_condition_range_max' => 'getNumberConditionRangeMax',
        'background_color' => 'getBackgroundColor',
        'check_color_field_name' => 'getCheckColorFieldName',
        'check_character' => 'getCheckCharacter',
        'rotation' => 'getRotation',
        'option_list' => 'getOptionList',
        'shape_fill_color' => 'getShapeFillColor',
        'string_condition_type' => 'getStringConditionType',
        'shape_fill_color_field_required' => 'getShapeFillColorFieldRequired',
        'decimal_places' => 'getDecimalPlaces',
        'include_time' => 'getIncludeTime',
        'width' => 'getWidth',
        'x' => 'getX',
        'maximum' => 'getMaximum',
        'y' => 'getY',
        'signature_allow_draw' => 'getSignatureAllowDraw',
        'number_condition_type' => 'getNumberConditionType',
        'opacity' => 'getOpacity',
        'minimum' => 'getMinimum',
        'signature_allow_type' => 'getSignatureAllowType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_STRING = 'string';
    const TYPE_NUMBER = 'number';
    const TYPE_BOOLEAN = 'boolean';
    const TYPE_DATE = 'date';
    const TYPE_ADDRESS = 'address';
    const TYPE_COUNTRY = 'country';
    const TYPE_EMAIL = 'email';
    const TYPE_URL = 'url';
    const TYPE_IMAGE = 'image';
    const TYPE_SIGNATURE = 'signature';
    const TYPE_BARCODE = 'barcode';
    const TYPE_COMBINED = 'combined';
    const IMAGE_GRAVITY_NORTH_WEST = 'NorthWest';
    const IMAGE_GRAVITY_NORTH = 'North';
    const IMAGE_GRAVITY_NORTH_EAST = 'NorthEast';
    const IMAGE_GRAVITY_WEST = 'West';
    const IMAGE_GRAVITY_CENTER = 'Center';
    const IMAGE_GRAVITY_EAST = 'East';
    const IMAGE_GRAVITY_SOUTH_WEST = 'SouthWest';
    const IMAGE_GRAVITY_SOUTH = 'South';
    const IMAGE_GRAVITY_SOUTH_EAST = 'SouthEast';
    const OVERFLOW_SHRINK_TO_FIT = 'shrink_to_fit';
    const OVERFLOW_TRUNCATE = 'truncate';
    const IMAGE_SCALE_TYPE_FIT = 'fit';
    const IMAGE_SCALE_TYPE_FILL = 'fill';
    const IMAGE_SCALE_TYPE_STRETCH = 'stretch';
    const V_ALIGNMENT_BOTTOM = 'bottom';
    const V_ALIGNMENT_CENTER = 'center';
    const V_ALIGNMENT_TOP = 'top';
    const SHAPE_TYPE_SQUARE = 'square';
    const SHAPE_TYPE_RECTANGLE = 'rectangle';
    const SHAPE_TYPE_CIRCLE = 'circle';
    const SHAPE_TYPE_ELLIPSE = 'ellipse';
    const DISPLAY_TYPE_TEXT = 'text';
    const DISPLAY_TYPE_CHECK = 'check';
    const DISPLAY_TYPE_QRCODE = 'qrcode';
    const DISPLAY_TYPE_BARCODE = 'barcode';
    const DISPLAY_TYPE_IMAGE = 'image';
    const DISPLAY_TYPE_SHAPE = 'shape';
    const ALIGNMENT_LEFT = 'left';
    const ALIGNMENT_CENTER = 'center';
    const ALIGNMENT_RIGHT = 'right';
    const CHECK_CHARACTER__10003 = '&#10003;';
    const CHECK_CHARACTER__10004 = '&#10004;';
    const CHECK_CHARACTER__10006 = '&#10006;';
    const CHECK_CHARACTER__10007 = '&#10007;';
    const CHECK_CHARACTER__10008 = '&#10008;';
    const STRING_CONDITION_TYPE_EQUALS = 'equals';
    const STRING_CONDITION_TYPE_CONTAINS = 'contains';
    const STRING_CONDITION_TYPE_STARTS_WITH = 'starts_with';
    const STRING_CONDITION_TYPE_ENDS_WITH = 'ends_with';
    const STRING_CONDITION_TYPE_REGEX = 'regex';
    const NUMBER_CONDITION_TYPE_EQUALS = 'equals';
    const NUMBER_CONDITION_TYPE_RANGE = 'range';
    const NUMBER_CONDITION_TYPE_GTE = 'gte';
    const NUMBER_CONDITION_TYPE_GT = 'gt';
    const NUMBER_CONDITION_TYPE_LTE = 'lte';
    const NUMBER_CONDITION_TYPE_LT = 'lt';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_STRING,
            self::TYPE_NUMBER,
            self::TYPE_BOOLEAN,
            self::TYPE_DATE,
            self::TYPE_ADDRESS,
            self::TYPE_COUNTRY,
            self::TYPE_EMAIL,
            self::TYPE_URL,
            self::TYPE_IMAGE,
            self::TYPE_SIGNATURE,
            self::TYPE_BARCODE,
            self::TYPE_COMBINED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImageGravityAllowableValues()
    {
        return [
            self::IMAGE_GRAVITY_NORTH_WEST,
            self::IMAGE_GRAVITY_NORTH,
            self::IMAGE_GRAVITY_NORTH_EAST,
            self::IMAGE_GRAVITY_WEST,
            self::IMAGE_GRAVITY_CENTER,
            self::IMAGE_GRAVITY_EAST,
            self::IMAGE_GRAVITY_SOUTH_WEST,
            self::IMAGE_GRAVITY_SOUTH,
            self::IMAGE_GRAVITY_SOUTH_EAST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverflowAllowableValues()
    {
        return [
            self::OVERFLOW_SHRINK_TO_FIT,
            self::OVERFLOW_TRUNCATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImageScaleTypeAllowableValues()
    {
        return [
            self::IMAGE_SCALE_TYPE_FIT,
            self::IMAGE_SCALE_TYPE_FILL,
            self::IMAGE_SCALE_TYPE_STRETCH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVAlignmentAllowableValues()
    {
        return [
            self::V_ALIGNMENT_BOTTOM,
            self::V_ALIGNMENT_CENTER,
            self::V_ALIGNMENT_TOP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShapeTypeAllowableValues()
    {
        return [
            self::SHAPE_TYPE_SQUARE,
            self::SHAPE_TYPE_RECTANGLE,
            self::SHAPE_TYPE_CIRCLE,
            self::SHAPE_TYPE_ELLIPSE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayTypeAllowableValues()
    {
        return [
            self::DISPLAY_TYPE_TEXT,
            self::DISPLAY_TYPE_CHECK,
            self::DISPLAY_TYPE_QRCODE,
            self::DISPLAY_TYPE_BARCODE,
            self::DISPLAY_TYPE_IMAGE,
            self::DISPLAY_TYPE_SHAPE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlignmentAllowableValues()
    {
        return [
            self::ALIGNMENT_LEFT,
            self::ALIGNMENT_CENTER,
            self::ALIGNMENT_RIGHT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckCharacterAllowableValues()
    {
        return [
            self::CHECK_CHARACTER__10003,
            self::CHECK_CHARACTER__10004,
            self::CHECK_CHARACTER__10006,
            self::CHECK_CHARACTER__10007,
            self::CHECK_CHARACTER__10008,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStringConditionTypeAllowableValues()
    {
        return [
            self::STRING_CONDITION_TYPE_EQUALS,
            self::STRING_CONDITION_TYPE_CONTAINS,
            self::STRING_CONDITION_TYPE_STARTS_WITH,
            self::STRING_CONDITION_TYPE_ENDS_WITH,
            self::STRING_CONDITION_TYPE_REGEX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNumberConditionTypeAllowableValues()
    {
        return [
            self::NUMBER_CONDITION_TYPE_EQUALS,
            self::NUMBER_CONDITION_TYPE_RANGE,
            self::NUMBER_CONDITION_TYPE_GTE,
            self::NUMBER_CONDITION_TYPE_GT,
            self::NUMBER_CONDITION_TYPE_LTE,
            self::NUMBER_CONDITION_TYPE_LT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['background_color_field_name'] = isset($data['background_color_field_name']) ? $data['background_color_field_name'] : null;
        $this->container['uppercase'] = isset($data['uppercase']) ? $data['uppercase'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['barcode_symbology'] = isset($data['barcode_symbology']) ? $data['barcode_symbology'] : null;
        $this->container['min_length'] = isset($data['min_length']) ? $data['min_length'] : null;
        $this->container['integer'] = isset($data['integer']) ? $data['integer'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['comb_value_offset'] = isset($data['comb_value_offset']) ? $data['comb_value_offset'] : null;
        $this->container['image_gravity'] = isset($data['image_gravity']) ? $data['image_gravity'] : null;
        $this->container['overflow'] = isset($data['overflow']) ? $data['overflow'] : null;
        $this->container['qrcode_color'] = isset($data['qrcode_color']) ? $data['qrcode_color'] : null;
        $this->container['color_field_required'] = isset($data['color_field_required']) ? $data['color_field_required'] : null;
        $this->container['background_color_field_required'] = isset($data['background_color_field_required']) ? $data['background_color_field_required'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_scale_type'] = isset($data['image_scale_type']) ? $data['image_scale_type'] : null;
        $this->container['exclusive_minimum'] = isset($data['exclusive_minimum']) ? $data['exclusive_minimum'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['number_condition_range_exclusive_max'] = isset($data['number_condition_range_exclusive_max']) ? $data['number_condition_range_exclusive_max'] : null;
        $this->container['invert_boolean_condition'] = isset($data['invert_boolean_condition']) ? $data['invert_boolean_condition'] : null;
        $this->container['shape_fill_color_field_name'] = isset($data['shape_fill_color_field_name']) ? $data['shape_fill_color_field_name'] : null;
        $this->container['static'] = isset($data['static']) ? $data['static'] : null;
        $this->container['shape_border_color_field_name'] = isset($data['shape_border_color_field_name']) ? $data['shape_border_color_field_name'] : null;
        $this->container['v_alignment'] = isset($data['v_alignment']) ? $data['v_alignment'] : null;
        $this->container['bold'] = isset($data['bold']) ? $data['bold'] : null;
        $this->container['shape_border_width'] = isset($data['shape_border_width']) ? $data['shape_border_width'] : null;
        $this->container['comb_number_of_cells'] = isset($data['comb_number_of_cells']) ? $data['comb_number_of_cells'] : null;
        $this->container['shape_border_color'] = isset($data['shape_border_color']) ? $data['shape_border_color'] : null;
        $this->container['comb'] = isset($data['comb']) ? $data['comb'] : null;
        $this->container['typeface'] = isset($data['typeface']) ? $data['typeface'] : null;
        $this->container['shape_type'] = isset($data['shape_type']) ? $data['shape_type'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['display_type'] = isset($data['display_type']) ? $data['display_type'] : null;
        $this->container['check_color'] = isset($data['check_color']) ? $data['check_color'] : null;
        $this->container['multiline_lines'] = isset($data['multiline_lines']) ? $data['multiline_lines'] : null;
        $this->container['multiline'] = isset($data['multiline']) ? $data['multiline'] : null;
        $this->container['true_text'] = isset($data['true_text']) ? $data['true_text'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['font_size'] = isset($data['font_size']) ? $data['font_size'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['alignment'] = isset($data['alignment']) ? $data['alignment'] : null;
        $this->container['max_length'] = isset($data['max_length']) ? $data['max_length'] : null;
        $this->container['auto_calculate_max_length'] = isset($data['auto_calculate_max_length']) ? $data['auto_calculate_max_length'] : null;
        $this->container['color_field_name'] = isset($data['color_field_name']) ? $data['color_field_name'] : null;
        $this->container['qrcode_color_field_name'] = isset($data['qrcode_color_field_name']) ? $data['qrcode_color_field_name'] : null;
        $this->container['number_condition_range_min'] = isset($data['number_condition_range_min']) ? $data['number_condition_range_min'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['check_color_field_required'] = isset($data['check_color_field_required']) ? $data['check_color_field_required'] : null;
        $this->container['combined_field_format'] = isset($data['combined_field_format']) ? $data['combined_field_format'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['shape_border_color_field_required'] = isset($data['shape_border_color_field_required']) ? $data['shape_border_color_field_required'] : null;
        $this->container['combined_field_names'] = isset($data['combined_field_names']) ? $data['combined_field_names'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['number_condition_range_exclusive_min'] = isset($data['number_condition_range_exclusive_min']) ? $data['number_condition_range_exclusive_min'] : null;
        $this->container['combined_field_separator'] = isset($data['combined_field_separator']) ? $data['combined_field_separator'] : null;
        $this->container['exclusive_maximum'] = isset($data['exclusive_maximum']) ? $data['exclusive_maximum'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['combined_field_type'] = isset($data['combined_field_type']) ? $data['combined_field_type'] : null;
        $this->container['date_time_format'] = isset($data['date_time_format']) ? $data['date_time_format'] : null;
        $this->container['qrcode_color_field_required'] = isset($data['qrcode_color_field_required']) ? $data['qrcode_color_field_required'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['false_text'] = isset($data['false_text']) ? $data['false_text'] : null;
        $this->container['placeholder'] = isset($data['placeholder']) ? $data['placeholder'] : null;
        $this->container['strikethrough'] = isset($data['strikethrough']) ? $data['strikethrough'] : null;
        $this->container['character_spacing'] = isset($data['character_spacing']) ? $data['character_spacing'] : null;
        $this->container['number_condition_range_max'] = isset($data['number_condition_range_max']) ? $data['number_condition_range_max'] : null;
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['check_color_field_name'] = isset($data['check_color_field_name']) ? $data['check_color_field_name'] : null;
        $this->container['check_character'] = isset($data['check_character']) ? $data['check_character'] : null;
        $this->container['rotation'] = isset($data['rotation']) ? $data['rotation'] : null;
        $this->container['option_list'] = isset($data['option_list']) ? $data['option_list'] : null;
        $this->container['shape_fill_color'] = isset($data['shape_fill_color']) ? $data['shape_fill_color'] : null;
        $this->container['string_condition_type'] = isset($data['string_condition_type']) ? $data['string_condition_type'] : null;
        $this->container['shape_fill_color_field_required'] = isset($data['shape_fill_color_field_required']) ? $data['shape_fill_color_field_required'] : null;
        $this->container['decimal_places'] = isset($data['decimal_places']) ? $data['decimal_places'] : null;
        $this->container['include_time'] = isset($data['include_time']) ? $data['include_time'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['x'] = isset($data['x']) ? $data['x'] : null;
        $this->container['maximum'] = isset($data['maximum']) ? $data['maximum'] : null;
        $this->container['y'] = isset($data['y']) ? $data['y'] : null;
        $this->container['signature_allow_draw'] = isset($data['signature_allow_draw']) ? $data['signature_allow_draw'] : null;
        $this->container['number_condition_type'] = isset($data['number_condition_type']) ? $data['number_condition_type'] : null;
        $this->container['opacity'] = isset($data['opacity']) ? $data['opacity'] : null;
        $this->container['minimum'] = isset($data['minimum']) ? $data['minimum'] : null;
        $this->container['signature_allow_type'] = isset($data['signature_allow_type']) ? $data['signature_allow_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getImageGravityAllowableValues();
        if (!is_null($this->container['image_gravity']) && !in_array($this->container['image_gravity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'image_gravity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOverflowAllowableValues();
        if (!is_null($this->container['overflow']) && !in_array($this->container['overflow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'overflow', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getImageScaleTypeAllowableValues();
        if (!is_null($this->container['image_scale_type']) && !in_array($this->container['image_scale_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'image_scale_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['height']) && ($this->container['height'] < 0)) {
            $invalidProperties[] = "invalid value for 'height', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getVAlignmentAllowableValues();
        if (!is_null($this->container['v_alignment']) && !in_array($this->container['v_alignment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'v_alignment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shape_border_width']) && ($this->container['shape_border_width'] < 0)) {
            $invalidProperties[] = "invalid value for 'shape_border_width', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['comb_number_of_cells']) && ($this->container['comb_number_of_cells'] < 0)) {
            $invalidProperties[] = "invalid value for 'comb_number_of_cells', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getShapeTypeAllowableValues();
        if (!is_null($this->container['shape_type']) && !in_array($this->container['shape_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shape_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisplayTypeAllowableValues();
        if (!is_null($this->container['display_type']) && !in_array($this->container['display_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'display_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['multiline_lines']) && ($this->container['multiline_lines'] < 0)) {
            $invalidProperties[] = "invalid value for 'multiline_lines', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['font_size']) && ($this->container['font_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'font_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['page']) && ($this->container['page'] < 1)) {
            $invalidProperties[] = "invalid value for 'page', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getAlignmentAllowableValues();
        if (!is_null($this->container['alignment']) && !in_array($this->container['alignment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'alignment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckCharacterAllowableValues();
        if (!is_null($this->container['check_character']) && !in_array($this->container['check_character'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'check_character', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rotation']) && ($this->container['rotation'] > 3.6E+2)) {
            $invalidProperties[] = "invalid value for 'rotation', must be smaller than or equal to 3.6E+2.";
        }

        if (!is_null($this->container['rotation']) && ($this->container['rotation'] < 0)) {
            $invalidProperties[] = "invalid value for 'rotation', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStringConditionTypeAllowableValues();
        if (!is_null($this->container['string_condition_type']) && !in_array($this->container['string_condition_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'string_condition_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['decimal_places']) && ($this->container['decimal_places'] < 0)) {
            $invalidProperties[] = "invalid value for 'decimal_places', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] < 0)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['x']) && ($this->container['x'] < 0)) {
            $invalidProperties[] = "invalid value for 'x', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['y']) && ($this->container['y'] < 0)) {
            $invalidProperties[] = "invalid value for 'y', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getNumberConditionTypeAllowableValues();
        if (!is_null($this->container['number_condition_type']) && !in_array($this->container['number_condition_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'number_condition_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['opacity']) && ($this->container['opacity'] > 1)) {
            $invalidProperties[] = "invalid value for 'opacity', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['opacity']) && ($this->container['opacity'] < 0)) {
            $invalidProperties[] = "invalid value for 'opacity', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets background_color_field_name
     *
     * @return string|null
     */
    public function getBackgroundColorFieldName()
    {
        return $this->container['background_color_field_name'];
    }

    /**
     * Sets background_color_field_name
     *
     * @param string|null $background_color_field_name background_color_field_name
     *
     * @return $this
     */
    public function setBackgroundColorFieldName($background_color_field_name)
    {
        $this->container['background_color_field_name'] = $background_color_field_name;

        return $this;
    }

    /**
     * Gets uppercase
     *
     * @return bool|null
     */
    public function getUppercase()
    {
        return $this->container['uppercase'];
    }

    /**
     * Sets uppercase
     *
     * @param bool|null $uppercase uppercase
     *
     * @return $this
     */
    public function setUppercase($uppercase)
    {
        $this->container['uppercase'] = $uppercase;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets barcode_symbology
     *
     * @return string|null
     */
    public function getBarcodeSymbology()
    {
        return $this->container['barcode_symbology'];
    }

    /**
     * Sets barcode_symbology
     *
     * @param string|null $barcode_symbology barcode_symbology
     *
     * @return $this
     */
    public function setBarcodeSymbology($barcode_symbology)
    {
        $this->container['barcode_symbology'] = $barcode_symbology;

        return $this;
    }

    /**
     * Gets min_length
     *
     * @return float|null
     */
    public function getMinLength()
    {
        return $this->container['min_length'];
    }

    /**
     * Sets min_length
     *
     * @param float|null $min_length min_length
     *
     * @return $this
     */
    public function setMinLength($min_length)
    {
        $this->container['min_length'] = $min_length;

        return $this;
    }

    /**
     * Gets integer
     *
     * @return bool|null
     */
    public function getInteger()
    {
        return $this->container['integer'];
    }

    /**
     * Sets integer
     *
     * @param bool|null $integer integer
     *
     * @return $this
     */
    public function setInteger($integer)
    {
        $this->container['integer'] = $integer;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets comb_value_offset
     *
     * @return float|null
     */
    public function getCombValueOffset()
    {
        return $this->container['comb_value_offset'];
    }

    /**
     * Sets comb_value_offset
     *
     * @param float|null $comb_value_offset comb_value_offset
     *
     * @return $this
     */
    public function setCombValueOffset($comb_value_offset)
    {
        $this->container['comb_value_offset'] = $comb_value_offset;

        return $this;
    }

    /**
     * Gets image_gravity
     *
     * @return string|null
     */
    public function getImageGravity()
    {
        return $this->container['image_gravity'];
    }

    /**
     * Sets image_gravity
     *
     * @param string|null $image_gravity image_gravity
     *
     * @return $this
     */
    public function setImageGravity($image_gravity)
    {
        $allowedValues = $this->getImageGravityAllowableValues();
        if (!is_null($image_gravity) && !in_array($image_gravity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'image_gravity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['image_gravity'] = $image_gravity;

        return $this;
    }

    /**
     * Gets overflow
     *
     * @return string|null
     */
    public function getOverflow()
    {
        return $this->container['overflow'];
    }

    /**
     * Sets overflow
     *
     * @param string|null $overflow overflow
     *
     * @return $this
     */
    public function setOverflow($overflow)
    {
        $allowedValues = $this->getOverflowAllowableValues();
        if (!is_null($overflow) && !in_array($overflow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'overflow', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['overflow'] = $overflow;

        return $this;
    }

    /**
     * Gets qrcode_color
     *
     * @return string|null
     */
    public function getQrcodeColor()
    {
        return $this->container['qrcode_color'];
    }

    /**
     * Sets qrcode_color
     *
     * @param string|null $qrcode_color qrcode_color
     *
     * @return $this
     */
    public function setQrcodeColor($qrcode_color)
    {
        $this->container['qrcode_color'] = $qrcode_color;

        return $this;
    }

    /**
     * Gets color_field_required
     *
     * @return bool|null
     */
    public function getColorFieldRequired()
    {
        return $this->container['color_field_required'];
    }

    /**
     * Sets color_field_required
     *
     * @param bool|null $color_field_required color_field_required
     *
     * @return $this
     */
    public function setColorFieldRequired($color_field_required)
    {
        $this->container['color_field_required'] = $color_field_required;

        return $this;
    }

    /**
     * Gets background_color_field_required
     *
     * @return bool|null
     */
    public function getBackgroundColorFieldRequired()
    {
        return $this->container['background_color_field_required'];
    }

    /**
     * Sets background_color_field_required
     *
     * @param bool|null $background_color_field_required background_color_field_required
     *
     * @return $this
     */
    public function setBackgroundColorFieldRequired($background_color_field_required)
    {
        $this->container['background_color_field_required'] = $background_color_field_required;

        return $this;
    }

    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_scale_type
     *
     * @return string|null
     */
    public function getImageScaleType()
    {
        return $this->container['image_scale_type'];
    }

    /**
     * Sets image_scale_type
     *
     * @param string|null $image_scale_type image_scale_type
     *
     * @return $this
     */
    public function setImageScaleType($image_scale_type)
    {
        $allowedValues = $this->getImageScaleTypeAllowableValues();
        if (!is_null($image_scale_type) && !in_array($image_scale_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'image_scale_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['image_scale_type'] = $image_scale_type;

        return $this;
    }

    /**
     * Gets exclusive_minimum
     *
     * @return bool|null
     */
    public function getExclusiveMinimum()
    {
        return $this->container['exclusive_minimum'];
    }

    /**
     * Sets exclusive_minimum
     *
     * @param bool|null $exclusive_minimum exclusive_minimum
     *
     * @return $this
     */
    public function setExclusiveMinimum($exclusive_minimum)
    {
        $this->container['exclusive_minimum'] = $exclusive_minimum;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {

        if (!is_null($height) && ($height < 0)) {
            throw new \InvalidArgumentException('invalid value for $height when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets number_condition_range_exclusive_max
     *
     * @return bool|null
     */
    public function getNumberConditionRangeExclusiveMax()
    {
        return $this->container['number_condition_range_exclusive_max'];
    }

    /**
     * Sets number_condition_range_exclusive_max
     *
     * @param bool|null $number_condition_range_exclusive_max number_condition_range_exclusive_max
     *
     * @return $this
     */
    public function setNumberConditionRangeExclusiveMax($number_condition_range_exclusive_max)
    {
        $this->container['number_condition_range_exclusive_max'] = $number_condition_range_exclusive_max;

        return $this;
    }

    /**
     * Gets invert_boolean_condition
     *
     * @return bool|null
     */
    public function getInvertBooleanCondition()
    {
        return $this->container['invert_boolean_condition'];
    }

    /**
     * Sets invert_boolean_condition
     *
     * @param bool|null $invert_boolean_condition invert_boolean_condition
     *
     * @return $this
     */
    public function setInvertBooleanCondition($invert_boolean_condition)
    {
        $this->container['invert_boolean_condition'] = $invert_boolean_condition;

        return $this;
    }

    /**
     * Gets shape_fill_color_field_name
     *
     * @return string|null
     */
    public function getShapeFillColorFieldName()
    {
        return $this->container['shape_fill_color_field_name'];
    }

    /**
     * Sets shape_fill_color_field_name
     *
     * @param string|null $shape_fill_color_field_name shape_fill_color_field_name
     *
     * @return $this
     */
    public function setShapeFillColorFieldName($shape_fill_color_field_name)
    {
        $this->container['shape_fill_color_field_name'] = $shape_fill_color_field_name;

        return $this;
    }

    /**
     * Gets static
     *
     * @return bool|null
     */
    public function getStatic()
    {
        return $this->container['static'];
    }

    /**
     * Sets static
     *
     * @param bool|null $static static
     *
     * @return $this
     */
    public function setStatic($static)
    {
        $this->container['static'] = $static;

        return $this;
    }

    /**
     * Gets shape_border_color_field_name
     *
     * @return string|null
     */
    public function getShapeBorderColorFieldName()
    {
        return $this->container['shape_border_color_field_name'];
    }

    /**
     * Sets shape_border_color_field_name
     *
     * @param string|null $shape_border_color_field_name shape_border_color_field_name
     *
     * @return $this
     */
    public function setShapeBorderColorFieldName($shape_border_color_field_name)
    {
        $this->container['shape_border_color_field_name'] = $shape_border_color_field_name;

        return $this;
    }

    /**
     * Gets v_alignment
     *
     * @return string|null
     */
    public function getVAlignment()
    {
        return $this->container['v_alignment'];
    }

    /**
     * Sets v_alignment
     *
     * @param string|null $v_alignment v_alignment
     *
     * @return $this
     */
    public function setVAlignment($v_alignment)
    {
        $allowedValues = $this->getVAlignmentAllowableValues();
        if (!is_null($v_alignment) && !in_array($v_alignment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'v_alignment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['v_alignment'] = $v_alignment;

        return $this;
    }

    /**
     * Gets bold
     *
     * @return bool|null
     */
    public function getBold()
    {
        return $this->container['bold'];
    }

    /**
     * Sets bold
     *
     * @param bool|null $bold bold
     *
     * @return $this
     */
    public function setBold($bold)
    {
        $this->container['bold'] = $bold;

        return $this;
    }

    /**
     * Gets shape_border_width
     *
     * @return float|null
     */
    public function getShapeBorderWidth()
    {
        return $this->container['shape_border_width'];
    }

    /**
     * Sets shape_border_width
     *
     * @param float|null $shape_border_width shape_border_width
     *
     * @return $this
     */
    public function setShapeBorderWidth($shape_border_width)
    {

        if (!is_null($shape_border_width) && ($shape_border_width < 0)) {
            throw new \InvalidArgumentException('invalid value for $shape_border_width when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['shape_border_width'] = $shape_border_width;

        return $this;
    }

    /**
     * Gets comb_number_of_cells
     *
     * @return float|null
     */
    public function getCombNumberOfCells()
    {
        return $this->container['comb_number_of_cells'];
    }

    /**
     * Sets comb_number_of_cells
     *
     * @param float|null $comb_number_of_cells comb_number_of_cells
     *
     * @return $this
     */
    public function setCombNumberOfCells($comb_number_of_cells)
    {

        if (!is_null($comb_number_of_cells) && ($comb_number_of_cells < 0)) {
            throw new \InvalidArgumentException('invalid value for $comb_number_of_cells when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['comb_number_of_cells'] = $comb_number_of_cells;

        return $this;
    }

    /**
     * Gets shape_border_color
     *
     * @return string|null
     */
    public function getShapeBorderColor()
    {
        return $this->container['shape_border_color'];
    }

    /**
     * Sets shape_border_color
     *
     * @param string|null $shape_border_color shape_border_color
     *
     * @return $this
     */
    public function setShapeBorderColor($shape_border_color)
    {
        $this->container['shape_border_color'] = $shape_border_color;

        return $this;
    }

    /**
     * Gets comb
     *
     * @return bool|null
     */
    public function getComb()
    {
        return $this->container['comb'];
    }

    /**
     * Sets comb
     *
     * @param bool|null $comb comb
     *
     * @return $this
     */
    public function setComb($comb)
    {
        $this->container['comb'] = $comb;

        return $this;
    }

    /**
     * Gets typeface
     *
     * @return string|null
     */
    public function getTypeface()
    {
        return $this->container['typeface'];
    }

    /**
     * Sets typeface
     *
     * @param string|null $typeface typeface
     *
     * @return $this
     */
    public function setTypeface($typeface)
    {
        $this->container['typeface'] = $typeface;

        return $this;
    }

    /**
     * Gets shape_type
     *
     * @return string|null
     */
    public function getShapeType()
    {
        return $this->container['shape_type'];
    }

    /**
     * Sets shape_type
     *
     * @param string|null $shape_type shape_type
     *
     * @return $this
     */
    public function setShapeType($shape_type)
    {
        $allowedValues = $this->getShapeTypeAllowableValues();
        if (!is_null($shape_type) && !in_array($shape_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shape_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shape_type'] = $shape_type;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets display_type
     *
     * @return string|null
     */
    public function getDisplayType()
    {
        return $this->container['display_type'];
    }

    /**
     * Sets display_type
     *
     * @param string|null $display_type display_type
     *
     * @return $this
     */
    public function setDisplayType($display_type)
    {
        $allowedValues = $this->getDisplayTypeAllowableValues();
        if (!is_null($display_type) && !in_array($display_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'display_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['display_type'] = $display_type;

        return $this;
    }

    /**
     * Gets check_color
     *
     * @return string|null
     */
    public function getCheckColor()
    {
        return $this->container['check_color'];
    }

    /**
     * Sets check_color
     *
     * @param string|null $check_color check_color
     *
     * @return $this
     */
    public function setCheckColor($check_color)
    {
        $this->container['check_color'] = $check_color;

        return $this;
    }

    /**
     * Gets multiline_lines
     *
     * @return float|null
     */
    public function getMultilineLines()
    {
        return $this->container['multiline_lines'];
    }

    /**
     * Sets multiline_lines
     *
     * @param float|null $multiline_lines multiline_lines
     *
     * @return $this
     */
    public function setMultilineLines($multiline_lines)
    {

        if (!is_null($multiline_lines) && ($multiline_lines < 0)) {
            throw new \InvalidArgumentException('invalid value for $multiline_lines when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['multiline_lines'] = $multiline_lines;

        return $this;
    }

    /**
     * Gets multiline
     *
     * @return bool|null
     */
    public function getMultiline()
    {
        return $this->container['multiline'];
    }

    /**
     * Sets multiline
     *
     * @param bool|null $multiline multiline
     *
     * @return $this
     */
    public function setMultiline($multiline)
    {
        $this->container['multiline'] = $multiline;

        return $this;
    }

    /**
     * Gets true_text
     *
     * @return string|null
     */
    public function getTrueText()
    {
        return $this->container['true_text'];
    }

    /**
     * Sets true_text
     *
     * @param string|null $true_text true_text
     *
     * @return $this
     */
    public function setTrueText($true_text)
    {
        $this->container['true_text'] = $true_text;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return float|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param float|null $font_size font_size
     *
     * @return $this
     */
    public function setFontSize($font_size)
    {

        if (!is_null($font_size) && ($font_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $font_size when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets page
     *
     * @return float|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param float|null $page page
     *
     * @return $this
     */
    public function setPage($page)
    {

        if (!is_null($page) && ($page < 1)) {
            throw new \InvalidArgumentException('invalid value for $page when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 1.');
        }

        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets alignment
     *
     * @return string|null
     */
    public function getAlignment()
    {
        return $this->container['alignment'];
    }

    /**
     * Sets alignment
     *
     * @param string|null $alignment alignment
     *
     * @return $this
     */
    public function setAlignment($alignment)
    {
        $allowedValues = $this->getAlignmentAllowableValues();
        if (!is_null($alignment) && !in_array($alignment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'alignment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['alignment'] = $alignment;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return float|null
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param float|null $max_length max_length
     *
     * @return $this
     */
    public function setMaxLength($max_length)
    {
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets auto_calculate_max_length
     *
     * @return bool|null
     */
    public function getAutoCalculateMaxLength()
    {
        return $this->container['auto_calculate_max_length'];
    }

    /**
     * Sets auto_calculate_max_length
     *
     * @param bool|null $auto_calculate_max_length auto_calculate_max_length
     *
     * @return $this
     */
    public function setAutoCalculateMaxLength($auto_calculate_max_length)
    {
        $this->container['auto_calculate_max_length'] = $auto_calculate_max_length;

        return $this;
    }

    /**
     * Gets color_field_name
     *
     * @return string|null
     */
    public function getColorFieldName()
    {
        return $this->container['color_field_name'];
    }

    /**
     * Sets color_field_name
     *
     * @param string|null $color_field_name color_field_name
     *
     * @return $this
     */
    public function setColorFieldName($color_field_name)
    {
        $this->container['color_field_name'] = $color_field_name;

        return $this;
    }

    /**
     * Gets qrcode_color_field_name
     *
     * @return string|null
     */
    public function getQrcodeColorFieldName()
    {
        return $this->container['qrcode_color_field_name'];
    }

    /**
     * Sets qrcode_color_field_name
     *
     * @param string|null $qrcode_color_field_name qrcode_color_field_name
     *
     * @return $this
     */
    public function setQrcodeColorFieldName($qrcode_color_field_name)
    {
        $this->container['qrcode_color_field_name'] = $qrcode_color_field_name;

        return $this;
    }

    /**
     * Gets number_condition_range_min
     *
     * @return float|null
     */
    public function getNumberConditionRangeMin()
    {
        return $this->container['number_condition_range_min'];
    }

    /**
     * Sets number_condition_range_min
     *
     * @param float|null $number_condition_range_min number_condition_range_min
     *
     * @return $this
     */
    public function setNumberConditionRangeMin($number_condition_range_min)
    {
        $this->container['number_condition_range_min'] = $number_condition_range_min;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets check_color_field_required
     *
     * @return bool|null
     */
    public function getCheckColorFieldRequired()
    {
        return $this->container['check_color_field_required'];
    }

    /**
     * Sets check_color_field_required
     *
     * @param bool|null $check_color_field_required check_color_field_required
     *
     * @return $this
     */
    public function setCheckColorFieldRequired($check_color_field_required)
    {
        $this->container['check_color_field_required'] = $check_color_field_required;

        return $this;
    }

    /**
     * Gets combined_field_format
     *
     * @return string|null
     */
    public function getCombinedFieldFormat()
    {
        return $this->container['combined_field_format'];
    }

    /**
     * Sets combined_field_format
     *
     * @param string|null $combined_field_format combined_field_format
     *
     * @return $this
     */
    public function setCombinedFieldFormat($combined_field_format)
    {
        $this->container['combined_field_format'] = $combined_field_format;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets shape_border_color_field_required
     *
     * @return bool|null
     */
    public function getShapeBorderColorFieldRequired()
    {
        return $this->container['shape_border_color_field_required'];
    }

    /**
     * Sets shape_border_color_field_required
     *
     * @param bool|null $shape_border_color_field_required shape_border_color_field_required
     *
     * @return $this
     */
    public function setShapeBorderColorFieldRequired($shape_border_color_field_required)
    {
        $this->container['shape_border_color_field_required'] = $shape_border_color_field_required;

        return $this;
    }

    /**
     * Gets combined_field_names
     *
     * @return string|null
     */
    public function getCombinedFieldNames()
    {
        return $this->container['combined_field_names'];
    }

    /**
     * Sets combined_field_names
     *
     * @param string|null $combined_field_names combined_field_names
     *
     * @return $this
     */
    public function setCombinedFieldNames($combined_field_names)
    {
        $this->container['combined_field_names'] = $combined_field_names;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets number_condition_range_exclusive_min
     *
     * @return bool|null
     */
    public function getNumberConditionRangeExclusiveMin()
    {
        return $this->container['number_condition_range_exclusive_min'];
    }

    /**
     * Sets number_condition_range_exclusive_min
     *
     * @param bool|null $number_condition_range_exclusive_min number_condition_range_exclusive_min
     *
     * @return $this
     */
    public function setNumberConditionRangeExclusiveMin($number_condition_range_exclusive_min)
    {
        $this->container['number_condition_range_exclusive_min'] = $number_condition_range_exclusive_min;

        return $this;
    }

    /**
     * Gets combined_field_separator
     *
     * @return string|null
     */
    public function getCombinedFieldSeparator()
    {
        return $this->container['combined_field_separator'];
    }

    /**
     * Sets combined_field_separator
     *
     * @param string|null $combined_field_separator combined_field_separator
     *
     * @return $this
     */
    public function setCombinedFieldSeparator($combined_field_separator)
    {
        $this->container['combined_field_separator'] = $combined_field_separator;

        return $this;
    }

    /**
     * Gets exclusive_maximum
     *
     * @return bool|null
     */
    public function getExclusiveMaximum()
    {
        return $this->container['exclusive_maximum'];
    }

    /**
     * Sets exclusive_maximum
     *
     * @param bool|null $exclusive_maximum exclusive_maximum
     *
     * @return $this
     */
    public function setExclusiveMaximum($exclusive_maximum)
    {
        $this->container['exclusive_maximum'] = $exclusive_maximum;

        return $this;
    }

    /**
     * Gets default
     *
     * @return string|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param string|null $default default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets combined_field_type
     *
     * @return string|null
     */
    public function getCombinedFieldType()
    {
        return $this->container['combined_field_type'];
    }

    /**
     * Sets combined_field_type
     *
     * @param string|null $combined_field_type combined_field_type
     *
     * @return $this
     */
    public function setCombinedFieldType($combined_field_type)
    {
        $this->container['combined_field_type'] = $combined_field_type;

        return $this;
    }

    /**
     * Gets date_time_format
     *
     * @return string|null
     */
    public function getDateTimeFormat()
    {
        return $this->container['date_time_format'];
    }

    /**
     * Sets date_time_format
     *
     * @param string|null $date_time_format date_time_format
     *
     * @return $this
     */
    public function setDateTimeFormat($date_time_format)
    {
        $this->container['date_time_format'] = $date_time_format;

        return $this;
    }

    /**
     * Gets qrcode_color_field_required
     *
     * @return bool|null
     */
    public function getQrcodeColorFieldRequired()
    {
        return $this->container['qrcode_color_field_required'];
    }

    /**
     * Sets qrcode_color_field_required
     *
     * @param bool|null $qrcode_color_field_required qrcode_color_field_required
     *
     * @return $this
     */
    public function setQrcodeColorFieldRequired($qrcode_color_field_required)
    {
        $this->container['qrcode_color_field_required'] = $qrcode_color_field_required;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return bool|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param bool|null $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets false_text
     *
     * @return string|null
     */
    public function getFalseText()
    {
        return $this->container['false_text'];
    }

    /**
     * Sets false_text
     *
     * @param string|null $false_text false_text
     *
     * @return $this
     */
    public function setFalseText($false_text)
    {
        $this->container['false_text'] = $false_text;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string|null
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string|null $placeholder placeholder
     *
     * @return $this
     */
    public function setPlaceholder($placeholder)
    {
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets strikethrough
     *
     * @return bool|null
     */
    public function getStrikethrough()
    {
        return $this->container['strikethrough'];
    }

    /**
     * Sets strikethrough
     *
     * @param bool|null $strikethrough strikethrough
     *
     * @return $this
     */
    public function setStrikethrough($strikethrough)
    {
        $this->container['strikethrough'] = $strikethrough;

        return $this;
    }

    /**
     * Gets character_spacing
     *
     * @return float|null
     */
    public function getCharacterSpacing()
    {
        return $this->container['character_spacing'];
    }

    /**
     * Sets character_spacing
     *
     * @param float|null $character_spacing character_spacing
     *
     * @return $this
     */
    public function setCharacterSpacing($character_spacing)
    {
        $this->container['character_spacing'] = $character_spacing;

        return $this;
    }

    /**
     * Gets number_condition_range_max
     *
     * @return float|null
     */
    public function getNumberConditionRangeMax()
    {
        return $this->container['number_condition_range_max'];
    }

    /**
     * Sets number_condition_range_max
     *
     * @param float|null $number_condition_range_max number_condition_range_max
     *
     * @return $this
     */
    public function setNumberConditionRangeMax($number_condition_range_max)
    {
        $this->container['number_condition_range_max'] = $number_condition_range_max;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color background_color
     *
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets check_color_field_name
     *
     * @return string|null
     */
    public function getCheckColorFieldName()
    {
        return $this->container['check_color_field_name'];
    }

    /**
     * Sets check_color_field_name
     *
     * @param string|null $check_color_field_name check_color_field_name
     *
     * @return $this
     */
    public function setCheckColorFieldName($check_color_field_name)
    {
        $this->container['check_color_field_name'] = $check_color_field_name;

        return $this;
    }

    /**
     * Gets check_character
     *
     * @return string|null
     */
    public function getCheckCharacter()
    {
        return $this->container['check_character'];
    }

    /**
     * Sets check_character
     *
     * @param string|null $check_character check_character
     *
     * @return $this
     */
    public function setCheckCharacter($check_character)
    {
        $allowedValues = $this->getCheckCharacterAllowableValues();
        if (!is_null($check_character) && !in_array($check_character, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'check_character', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_character'] = $check_character;

        return $this;
    }

    /**
     * Gets rotation
     *
     * @return float|null
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     *
     * @param float|null $rotation rotation
     *
     * @return $this
     */
    public function setRotation($rotation)
    {

        if (!is_null($rotation) && ($rotation > 3.6E+2)) {
            throw new \InvalidArgumentException('invalid value for $rotation when calling TemplatestemplateIdaddFieldsFields., must be smaller than or equal to 3.6E+2.');
        }
        if (!is_null($rotation) && ($rotation < 0)) {
            throw new \InvalidArgumentException('invalid value for $rotation when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets option_list
     *
     * @return string|null
     */
    public function getOptionList()
    {
        return $this->container['option_list'];
    }

    /**
     * Sets option_list
     *
     * @param string|null $option_list option_list
     *
     * @return $this
     */
    public function setOptionList($option_list)
    {
        $this->container['option_list'] = $option_list;

        return $this;
    }

    /**
     * Gets shape_fill_color
     *
     * @return string|null
     */
    public function getShapeFillColor()
    {
        return $this->container['shape_fill_color'];
    }

    /**
     * Sets shape_fill_color
     *
     * @param string|null $shape_fill_color shape_fill_color
     *
     * @return $this
     */
    public function setShapeFillColor($shape_fill_color)
    {
        $this->container['shape_fill_color'] = $shape_fill_color;

        return $this;
    }

    /**
     * Gets string_condition_type
     *
     * @return string|null
     */
    public function getStringConditionType()
    {
        return $this->container['string_condition_type'];
    }

    /**
     * Sets string_condition_type
     *
     * @param string|null $string_condition_type string_condition_type
     *
     * @return $this
     */
    public function setStringConditionType($string_condition_type)
    {
        $allowedValues = $this->getStringConditionTypeAllowableValues();
        if (!is_null($string_condition_type) && !in_array($string_condition_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'string_condition_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['string_condition_type'] = $string_condition_type;

        return $this;
    }

    /**
     * Gets shape_fill_color_field_required
     *
     * @return bool|null
     */
    public function getShapeFillColorFieldRequired()
    {
        return $this->container['shape_fill_color_field_required'];
    }

    /**
     * Sets shape_fill_color_field_required
     *
     * @param bool|null $shape_fill_color_field_required shape_fill_color_field_required
     *
     * @return $this
     */
    public function setShapeFillColorFieldRequired($shape_fill_color_field_required)
    {
        $this->container['shape_fill_color_field_required'] = $shape_fill_color_field_required;

        return $this;
    }

    /**
     * Gets decimal_places
     *
     * @return float|null
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimal_places'];
    }

    /**
     * Sets decimal_places
     *
     * @param float|null $decimal_places decimal_places
     *
     * @return $this
     */
    public function setDecimalPlaces($decimal_places)
    {

        if (!is_null($decimal_places) && ($decimal_places < 0)) {
            throw new \InvalidArgumentException('invalid value for $decimal_places when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['decimal_places'] = $decimal_places;

        return $this;
    }

    /**
     * Gets include_time
     *
     * @return bool|null
     */
    public function getIncludeTime()
    {
        return $this->container['include_time'];
    }

    /**
     * Sets include_time
     *
     * @param bool|null $include_time include_time
     *
     * @return $this
     */
    public function setIncludeTime($include_time)
    {
        $this->container['include_time'] = $include_time;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {

        if (!is_null($width) && ($width < 0)) {
            throw new \InvalidArgumentException('invalid value for $width when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets x
     *
     * @return float|null
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param float|null $x x
     *
     * @return $this
     */
    public function setX($x)
    {

        if (!is_null($x) && ($x < 0)) {
            throw new \InvalidArgumentException('invalid value for $x when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets maximum
     *
     * @return float|null
     */
    public function getMaximum()
    {
        return $this->container['maximum'];
    }

    /**
     * Sets maximum
     *
     * @param float|null $maximum maximum
     *
     * @return $this
     */
    public function setMaximum($maximum)
    {
        $this->container['maximum'] = $maximum;

        return $this;
    }

    /**
     * Gets y
     *
     * @return float|null
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param float|null $y y
     *
     * @return $this
     */
    public function setY($y)
    {

        if (!is_null($y) && ($y < 0)) {
            throw new \InvalidArgumentException('invalid value for $y when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets signature_allow_draw
     *
     * @return bool|null
     */
    public function getSignatureAllowDraw()
    {
        return $this->container['signature_allow_draw'];
    }

    /**
     * Sets signature_allow_draw
     *
     * @param bool|null $signature_allow_draw signature_allow_draw
     *
     * @return $this
     */
    public function setSignatureAllowDraw($signature_allow_draw)
    {
        $this->container['signature_allow_draw'] = $signature_allow_draw;

        return $this;
    }

    /**
     * Gets number_condition_type
     *
     * @return string|null
     */
    public function getNumberConditionType()
    {
        return $this->container['number_condition_type'];
    }

    /**
     * Sets number_condition_type
     *
     * @param string|null $number_condition_type number_condition_type
     *
     * @return $this
     */
    public function setNumberConditionType($number_condition_type)
    {
        $allowedValues = $this->getNumberConditionTypeAllowableValues();
        if (!is_null($number_condition_type) && !in_array($number_condition_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'number_condition_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['number_condition_type'] = $number_condition_type;

        return $this;
    }

    /**
     * Gets opacity
     *
     * @return float|null
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     *
     * @param float|null $opacity opacity
     *
     * @return $this
     */
    public function setOpacity($opacity)
    {

        if (!is_null($opacity) && ($opacity > 1)) {
            throw new \InvalidArgumentException('invalid value for $opacity when calling TemplatestemplateIdaddFieldsFields., must be smaller than or equal to 1.');
        }
        if (!is_null($opacity) && ($opacity < 0)) {
            throw new \InvalidArgumentException('invalid value for $opacity when calling TemplatestemplateIdaddFieldsFields., must be bigger than or equal to 0.');
        }

        $this->container['opacity'] = $opacity;

        return $this;
    }

    /**
     * Gets minimum
     *
     * @return float|null
     */
    public function getMinimum()
    {
        return $this->container['minimum'];
    }

    /**
     * Sets minimum
     *
     * @param float|null $minimum minimum
     *
     * @return $this
     */
    public function setMinimum($minimum)
    {
        $this->container['minimum'] = $minimum;

        return $this;
    }

    /**
     * Gets signature_allow_type
     *
     * @return bool|null
     */
    public function getSignatureAllowType()
    {
        return $this->container['signature_allow_type'];
    }

    /**
     * Sets signature_allow_type
     *
     * @param bool|null $signature_allow_type signature_allow_type
     *
     * @return $this
     */
    public function setSignatureAllowType($signature_allow_type)
    {
        $this->container['signature_allow_type'] = $signature_allow_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


